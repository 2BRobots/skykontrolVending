

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Jan 16 18:32:55 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	12F1822
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 2.10
    21                           ; Generated 31/07/2019 GMT
    22                           ; 
    23                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC12F1822 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0015                     	;# 
    70  0016                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001B                     	;# 
    77  001C                     	;# 
    78  001E                     	;# 
    79  001F                     	;# 
    80  008C                     	;# 
    81  0091                     	;# 
    82  0092                     	;# 
    83  0095                     	;# 
    84  0096                     	;# 
    85  0097                     	;# 
    86  0098                     	;# 
    87  0099                     	;# 
    88  009A                     	;# 
    89  009B                     	;# 
    90  009B                     	;# 
    91  009C                     	;# 
    92  009D                     	;# 
    93  009E                     	;# 
    94  010C                     	;# 
    95  0111                     	;# 
    96  0112                     	;# 
    97  0115                     	;# 
    98  0116                     	;# 
    99  0117                     	;# 
   100  0118                     	;# 
   101  0119                     	;# 
   102  011A                     	;# 
   103  011B                     	;# 
   104  011D                     	;# 
   105  011D                     	;# 
   106  018C                     	;# 
   107  0191                     	;# 
   108  0191                     	;# 
   109  0192                     	;# 
   110  0193                     	;# 
   111  0193                     	;# 
   112  0193                     	;# 
   113  0194                     	;# 
   114  0195                     	;# 
   115  0196                     	;# 
   116  0199                     	;# 
   117  019A                     	;# 
   118  019B                     	;# 
   119  019B                     	;# 
   120  019B                     	;# 
   121  019B                     	;# 
   122  019C                     	;# 
   123  019C                     	;# 
   124  019D                     	;# 
   125  019E                     	;# 
   126  019F                     	;# 
   127  020C                     	;# 
   128  0211                     	;# 
   129  0211                     	;# 
   130  0212                     	;# 
   131  0212                     	;# 
   132  0213                     	;# 
   133  0213                     	;# 
   134  0214                     	;# 
   135  0214                     	;# 
   136  0215                     	;# 
   137  0215                     	;# 
   138  0215                     	;# 
   139  0216                     	;# 
   140  0216                     	;# 
   141  0217                     	;# 
   142  0217                     	;# 
   143  0291                     	;# 
   144  0291                     	;# 
   145  0292                     	;# 
   146  0293                     	;# 
   147  0294                     	;# 
   148  0295                     	;# 
   149  0295                     	;# 
   150  0296                     	;# 
   151  0391                     	;# 
   152  0392                     	;# 
   153  0393                     	;# 
   154  039A                     	;# 
   155  039C                     	;# 
   156  039D                     	;# 
   157  039E                     	;# 
   158  039F                     	;# 
   159  0FE4                     	;# 
   160  0FE5                     	;# 
   161  0FE6                     	;# 
   162  0FE7                     	;# 
   163  0FE8                     	;# 
   164  0FE9                     	;# 
   165  0FEA                     	;# 
   166  0FEB                     	;# 
   167  0FED                     	;# 
   168  0FEE                     	;# 
   169  0FEF                     	;# 
   170  0000                     	;# 
   171  0001                     	;# 
   172  0002                     	;# 
   173  0003                     	;# 
   174  0004                     	;# 
   175  0005                     	;# 
   176  0006                     	;# 
   177  0007                     	;# 
   178  0008                     	;# 
   179  0009                     	;# 
   180  000A                     	;# 
   181  000B                     	;# 
   182  000C                     	;# 
   183  0011                     	;# 
   184  0012                     	;# 
   185  0015                     	;# 
   186  0016                     	;# 
   187  0016                     	;# 
   188  0017                     	;# 
   189  0018                     	;# 
   190  0019                     	;# 
   191  001A                     	;# 
   192  001B                     	;# 
   193  001C                     	;# 
   194  001E                     	;# 
   195  001F                     	;# 
   196  008C                     	;# 
   197  0091                     	;# 
   198  0092                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0097                     	;# 
   202  0098                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  010C                     	;# 
   211  0111                     	;# 
   212  0112                     	;# 
   213  0115                     	;# 
   214  0116                     	;# 
   215  0117                     	;# 
   216  0118                     	;# 
   217  0119                     	;# 
   218  011A                     	;# 
   219  011B                     	;# 
   220  011D                     	;# 
   221  011D                     	;# 
   222  018C                     	;# 
   223  0191                     	;# 
   224  0191                     	;# 
   225  0192                     	;# 
   226  0193                     	;# 
   227  0193                     	;# 
   228  0193                     	;# 
   229  0194                     	;# 
   230  0195                     	;# 
   231  0196                     	;# 
   232  0199                     	;# 
   233  019A                     	;# 
   234  019B                     	;# 
   235  019B                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019C                     	;# 
   239  019C                     	;# 
   240  019D                     	;# 
   241  019E                     	;# 
   242  019F                     	;# 
   243  020C                     	;# 
   244  0211                     	;# 
   245  0211                     	;# 
   246  0212                     	;# 
   247  0212                     	;# 
   248  0213                     	;# 
   249  0213                     	;# 
   250  0214                     	;# 
   251  0214                     	;# 
   252  0215                     	;# 
   253  0215                     	;# 
   254  0215                     	;# 
   255  0216                     	;# 
   256  0216                     	;# 
   257  0217                     	;# 
   258  0217                     	;# 
   259  0291                     	;# 
   260  0291                     	;# 
   261  0292                     	;# 
   262  0293                     	;# 
   263  0294                     	;# 
   264  0295                     	;# 
   265  0295                     	;# 
   266  0296                     	;# 
   267  0391                     	;# 
   268  0392                     	;# 
   269  0393                     	;# 
   270  039A                     	;# 
   271  039C                     	;# 
   272  039D                     	;# 
   273  039E                     	;# 
   274  039F                     	;# 
   275  0FE4                     	;# 
   276  0FE5                     	;# 
   277  0FE6                     	;# 
   278  0FE7                     	;# 
   279  0FE8                     	;# 
   280  0FE9                     	;# 
   281  0FEA                     	;# 
   282  0FEB                     	;# 
   283  0FED                     	;# 
   284  0FEE                     	;# 
   285  0FEF                     	;# 
   286                           
   287                           	psect	idataBANK0
   288  0188                     __pidataBANK0:	
   289                           
   290                           ;initializer for _first_i2c
   291  0188  3401               	retlw	1
   292                           
   293                           	psect	stringtext1
   294  0189                     __pstringtext1:	
   295  0189                     _RX_ELMNTS:	
   296  0189  340F               	retlw	15
   297  018A                     __end_of_RX_ELMNTS:	
   298  0018                     _T1CON	set	24
   299  000B                     _INTCON	set	11
   300  001C                     _T2CON	set	28
   301  001B                     _PR2	set	27
   302  0012                     _PIR2bits	set	18
   303  000C                     _PORTAbits	set	12
   304  0018                     _T1CONbits	set	24
   305  0011                     _PIR1bits	set	17
   306  000B                     _INTCONbits	set	11
   307  0092                     _PIE2bits	set	146
   308  0095                     _OPTION_REGbits	set	149
   309  008C                     _TRISA	set	140
   310  0099                     _OSCCON	set	153
   311  0091                     _PIE1bits	set	145
   312  010C                     _LATAbits	set	268
   313  011D                     _APFCONbits	set	285
   314  018C                     _ANSELA	set	396
   315  0212                     _SSP1ADD	set	530
   316  0217                     _SSP1CON3bits	set	535
   317  0216                     _SSP1CON2bits	set	534
   318  0215                     _SSP1CON1	set	533
   319  0214                     _SSP1STAT	set	532
   320  020C                     _WPUA	set	524
   321  0215                     _SSP1CON1bits	set	533
   322  0211                     _SSP1BUF	set	529
   323  0214                     _SSP1STATbits	set	532
   324  0291                     _CCPR1L	set	657
   325  0293                     _CCP1CON	set	659
   326  0391                     _IOCAPbits	set	913
   327  0393                     _IOCAFbits	set	915
   328                           
   329                           ; #config settings
   330  0000                     
   331                           	psect	cinit
   332  00BC                     start_initialization:	
   333  00BC                     __initialization:	
   334                           
   335                           ; Initialize objects allocated to BANK0
   336  00BC  2188               	fcall	__pidataBANK0	;fetch initializer
   337  00BD  00B7               	movwf	__pdataBANK0& (0+127)
   338                           
   339                           ; Clear objects allocated to COMMON
   340  00BE  01F9               	clrf	__pbssCOMMON& (0+127)
   341                           
   342                           ; Clear objects allocated to BANK0
   343  00BF  3020               	movlw	low __pbssBANK0
   344  00C0  0084               	movwf	4
   345  00C1  3000               	movlw	high __pbssBANK0
   346  00C2  0085               	movwf	5
   347  00C3  3013               	movlw	19
   348  00C4  2182               	fcall	clear_ram0
   349  00C5                     end_of_initialization:	
   350                           ;End of C runtime variable initialization code
   351                           
   352  00C5                     __end_of__initialization:	
   353  00C5  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   354  00C6  0020               	movlb	0
   355  00C7  28C8               	ljmp	_main	;jump to C main() function
   356                           
   357                           	psect	bssCOMMON
   358  0079                     __pbssCOMMON:	
   359  0079                     _index_i2c:	
   360  0079                     	ds	1
   361                           
   362                           	psect	bssBANK0
   363  0020                     __pbssBANK0:	
   364  0020                     _I2C_buffer:	
   365  0020                     	ds	15
   366  002F                     isr@junk:	
   367  002F                     	ds	1
   368  0030                     _pulseLenght:	
   369  0030                     	ds	1
   370  0031                     _pulses:	
   371  0031                     	ds	1
   372  0032                     _trigger:	
   373  0032                     	ds	1
   374                           
   375                           	psect	dataBANK0
   376  0037                     __pdataBANK0:	
   377  0037                     _first_i2c:	
   378  0037                     	ds	1
   379                           
   380                           	psect	clrtext
   381  0182                     clear_ram0:	
   382                           ;	Called with FSR0 containing the base address, and
   383                           ;	WREG with the size to clear
   384                           
   385  0182  0064               	clrwdt	;clear the watchdog before getting into this loop
   386  0183                     clrloop0:	
   387  0183  0180               	clrf	0	;clear RAM location pointed to by FSR
   388  0184  3101               	addfsr 0,1
   389  0185  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   390  0186  2983               	goto	clrloop0	;have we reached the end yet?
   391  0187  3400               	retlw	0	;all done for this memory range, return
   392                           
   393                           	psect	cstackCOMMON
   394  0070                     __pcstackCOMMON:	
   395  0070                     ?_isr:	
   396  0070                     ??_isr:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0070                     ?_PWM_Init:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ?_init_I2C_buffer:	
   403                           ; 1 bytes @ 0x0
   404                           
   405                           
   406                           ; 1 bytes @ 0x0
   407  0070                     	ds	1
   408  0071                     ??_PWM_Init:	
   409  0071                     ?_PWM_set_duty:	
   410                           ; 1 bytes @ 0x1
   411                           
   412  0071                     ??_init_I2C_buffer:	
   413                           ; 1 bytes @ 0x1
   414                           
   415  0071                     PWM_set_duty@duty:	
   416                           ; 1 bytes @ 0x1
   417                           
   418                           
   419                           ; 2 bytes @ 0x1
   420  0071                     	ds	2
   421  0073                     ??_PWM_set_duty:	
   422                           
   423                           ; 1 bytes @ 0x3
   424  0073                     	ds	2
   425  0075                     ?_main:	
   426  0075                     main@argc:	
   427                           ; 2 bytes @ 0x5
   428                           
   429                           
   430                           ; 2 bytes @ 0x5
   431  0075                     	ds	2
   432  0077                     main@argv:	
   433                           
   434                           ; 2 bytes @ 0x7
   435  0077                     	ds	2
   436                           
   437                           	psect	cstackBANK0
   438  0033                     __pcstackBANK0:	
   439  0033                     ??_main:	
   440                           
   441                           ; 1 bytes @ 0x0
   442  0033                     	ds	4
   443                           
   444                           	psect	maintext
   445  00C8                     __pmaintext:	
   446 ;;
   447 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   448 ;;
   449 ;; *************** function _main *****************
   450 ;; Defined at:
   451 ;;		line 227 in file "main.c"
   452 ;; Parameters:    Size  Location     Type
   453 ;;  argc            2    5[COMMON] int 
   454 ;;  argv            2    7[COMMON] PTR PTR unsigned char 
   455 ;; Auto vars:     Size  Location     Type
   456 ;;		None
   457 ;; Return value:  Size  Location     Type
   458 ;;                  2    5[COMMON] int 
   459 ;; Registers used:
   460 ;;		wreg, status,2, status,0, pclath, cstack
   461 ;; Tracked objects:
   462 ;;		On entry : B1F/0
   463 ;;		On exit  : 0/0
   464 ;;		Unchanged: 0/0
   465 ;; Data sizes:     COMMON   BANK0   BANK1
   466 ;;      Params:         4       0       0
   467 ;;      Locals:         0       0       0
   468 ;;      Temps:          0       4       0
   469 ;;      Totals:         4       4       0
   470 ;;Total ram usage:        8 bytes
   471 ;; Hardware stack levels required when called:    2
   472 ;; This function calls:
   473 ;;		_PWM_Init
   474 ;;		_PWM_set_duty
   475 ;;		_init_I2C_buffer
   476 ;; This function is called by:
   477 ;;		Startup code after reset
   478 ;; This function uses a non-reentrant model
   479 ;;
   480                           
   481                           
   482                           ;psect for function _main
   483  00C8                     _main:	
   484                           
   485                           ;main.c: 228: OSCCON = 0b11110000;
   486                           
   487                           ;incstack = 0
   488                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   489  00C8  30F0               	movlw	240
   490  00C9  0021               	movlb	1	; select bank1
   491  00CA  0099               	movwf	25	;volatile
   492                           
   493                           ;main.c: 229: init_I2C_buffer();
   494  00CB  213A               	fcall	_init_I2C_buffer
   495                           
   496                           ;main.c: 230: TRISA = 0b00011110;
   497  00CC  301E               	movlw	30
   498  00CD  0021               	movlb	1	; select bank1
   499  00CE  008C               	movwf	12	;volatile
   500                           
   501                           ;main.c: 231: ANSELA = 0b00000000;
   502  00CF  0023               	movlb	3	; select bank3
   503  00D0  018C               	clrf	12	;volatile
   504                           
   505                           ;main.c: 232: WPUA = 0b00011110;
   506  00D1  301E               	movlw	30
   507  00D2  0024               	movlb	4	; select bank4
   508  00D3  008C               	movwf	12	;volatile
   509                           
   510                           ;main.c: 233: OPTION_REGbits.nWPUEN = 1;
   511  00D4  0021               	movlb	1	; select bank1
   512  00D5  1795               	bsf	21,7	;volatile
   513                           
   514                           ;main.c: 234: APFCONbits.CCP1SEL = 1;
   515  00D6  0022               	movlb	2	; select bank2
   516  00D7  141D               	bsf	29,0	;volatile
   517                           
   518                           ;main.c: 235: LATAbits.LATA0 = 0;
   519  00D8  100C               	bcf	12,0	;volatile
   520                           
   521                           ;main.c: 236: SSP1STAT = 0b10000000;
   522  00D9  3080               	movlw	128
   523  00DA  0024               	movlb	4	; select bank4
   524  00DB  0094               	movwf	20	;volatile
   525                           
   526                           ;main.c: 237: SSP1CON1 = 0b00110110;
   527  00DC  3036               	movlw	54
   528  00DD  0095               	movwf	21	;volatile
   529                           
   530                           ;main.c: 238: SSP1CON2bits.SEN = 1;
   531  00DE  1416               	bsf	22,0	;volatile
   532                           
   533                           ;main.c: 239: SSP1CON3bits.BOEN = 1;
   534  00DF  1617               	bsf	23,4	;volatile
   535                           
   536                           ;main.c: 240: SSP1CON3bits.SDAHT = 1;
   537  00E0  1597               	bsf	23,3	;volatile
   538                           
   539                           ;main.c: 241: SSP1CON3bits.SBCDE = 1;
   540  00E1  1517               	bsf	23,2	;volatile
   541                           
   542                           ;main.c: 242: SSP1ADD = (char) (0x3D << 1);
   543  00E2  307A               	movlw	122
   544  00E3  0092               	movwf	18	;volatile
   545                           
   546                           ;main.c: 243: PIR1bits.SSP1IF = 0;
   547  00E4  0020               	movlb	0	; select bank0
   548  00E5  1191               	bcf	17,3	;volatile
   549                           
   550                           ;main.c: 244: PIR2bits.BCL1IF = 0;
   551  00E6  1192               	bcf	18,3	;volatile
   552                           
   553                           ;main.c: 245: PIE2bits.BCL1IE = 1;
   554  00E7  0021               	movlb	1	; select bank1
   555  00E8  1592               	bsf	18,3	;volatile
   556                           
   557                           ;main.c: 246: PIE1bits.SSP1IE = 1;
   558  00E9  1591               	bsf	17,3	;volatile
   559                           
   560                           ;main.c: 247: INTCONbits.PEIE = 1;
   561  00EA  170B               	bsf	11,6	;volatile
   562                           
   563                           ;main.c: 248: PWM_Init();
   564  00EB  2176               	fcall	_PWM_Init
   565                           
   566                           ;main.c: 249: PWM_set_duty(0);
   567  00EC  3000               	movlw	0
   568  00ED  00F1               	movwf	PWM_set_duty@duty
   569  00EE  00F2               	movwf	PWM_set_duty@duty+1
   570  00EF  2158               	fcall	_PWM_set_duty
   571                           
   572                           ;main.c: 250: IOCAPbits.IOCAP4 = 1;
   573  00F0  0027               	movlb	7	; select bank7
   574  00F1  1611               	bsf	17,4	;volatile
   575                           
   576                           ;main.c: 251: INTCON = 0b01001000;
   577  00F2  3048               	movlw	72
   578  00F3  008B               	movwf	11	;volatile
   579                           
   580                           ;main.c: 252: T1CON = 0b00110100;
   581  00F4  3034               	movlw	52
   582  00F5  0020               	movlb	0	; select bank0
   583  00F6  0098               	movwf	24	;volatile
   584                           
   585                           ;main.c: 253: PIE1bits.TMR1IE = 1;
   586  00F7  0021               	movlb	1	; select bank1
   587  00F8  1411               	bsf	17,0	;volatile
   588                           
   589                           ;main.c: 254: T1CONbits.TMR1ON = 1;
   590  00F9  0020               	movlb	0	; select bank0
   591  00FA  1418               	bsf	24,0	;volatile
   592                           
   593                           ;main.c: 255: INTCONbits.GIE = 1;
   594  00FB  178B               	bsf	11,7	;volatile
   595  00FC                     l117:	
   596                           ;main.c: 257: while (1) {
   597                           
   598  00FC  0064               	clrwdt	;# 
   599                           
   600                           ;main.c: 259: if (I2C_buffer.data.RESET == 1) {
   601  00FD  0020               	movlb	0	; select bank0
   602  00FE  0321               	decf	_I2C_buffer+1,w	;volatile
   603  00FF  1903               	btfsc	3,2
   604  0100  0001               	reset	;# 
   605                           
   606                           ;main.c: 261: };main.c: 262: PWM_set_duty(I2C_buffer.data.BRIGHTNESS);
   607  0101  0020               	movlb	0	; select bank0
   608  0102  082E               	movf	_I2C_buffer+14,w	;volatile
   609  0103  00F2               	movwf	PWM_set_duty@duty+1
   610  0104  082D               	movf	_I2C_buffer+13,w	;volatile
   611  0105  00F1               	movwf	PWM_set_duty@duty
   612  0106  2158               	fcall	_PWM_set_duty
   613                           
   614                           ;main.c: 263: if (I2C_buffer.data.BEEP > 0)
   615  0107  0020               	movlb	0	; select bank0
   616  0108  082B               	movf	_I2C_buffer+11,w	;volatile
   617  0109  042C               	iorwf	_I2C_buffer+12,w	;volatile
   618  010A  1903               	btfsc	3,2
   619  010B  2914               	goto	l119
   620                           
   621                           ;main.c: 264: {;main.c: 265: LATAbits.LATA0 = 1;
   622  010C  0022               	movlb	2	; select bank2
   623  010D  140C               	bsf	12,0	;volatile
   624                           
   625                           ;main.c: 266: I2C_buffer.data.BEEP--;
   626  010E  3001               	movlw	1
   627  010F  0020               	movlb	0	; select bank0
   628  0110  02AB               	subwf	_I2C_buffer+11,f	;volatile
   629  0111  3000               	movlw	0
   630  0112  3BAC               	subwfb	_I2C_buffer+12,f	;volatile
   631                           
   632                           ;main.c: 267: } else {
   633  0113  2916               	goto	l1239
   634  0114                     l119:	
   635                           
   636                           ;main.c: 268: LATAbits.LATA0 = 0;
   637  0114  0022               	movlb	2	; select bank2
   638  0115  100C               	bcf	12,0	;volatile
   639  0116                     l1239:	
   640                           
   641                           ;main.c: 269: };main.c: 270: if (I2C_buffer.data.DETECTED == 1)
   642  0116  0020               	movlb	0	; select bank0
   643  0117  0322               	decf	_I2C_buffer+2,w	;volatile
   644  0118  1D03               	btfss	3,2
   645  0119  2930               	goto	l1245
   646                           
   647                           ;main.c: 271: {;main.c: 272: I2C_buffer.data.REMAIN--;
   648  011A  3001               	movlw	1
   649  011B  00B3               	movwf	??_main
   650  011C  3000               	movlw	0
   651  011D  00B4               	movwf	??_main+1
   652  011E  3000               	movlw	0
   653  011F  00B5               	movwf	??_main+2
   654  0120  3000               	movlw	0
   655  0121  00B6               	movwf	??_main+3
   656  0122  0833               	movf	??_main,w
   657  0123  02A7               	subwf	_I2C_buffer+7,f	;volatile
   658  0124  0834               	movf	??_main+1,w
   659  0125  3BA8               	subwfb	_I2C_buffer+8,f	;volatile
   660  0126  0835               	movf	??_main+2,w
   661  0127  3BA9               	subwfb	_I2C_buffer+9,f	;volatile
   662  0128  0836               	movf	??_main+3,w
   663  0129  3BAA               	subwfb	_I2C_buffer+10,f	;volatile
   664                           
   665                           ;main.c: 273: if (I2C_buffer.data.REMAIN == 0) {
   666  012A  082A               	movf	_I2C_buffer+10,w	;volatile
   667  012B  0429               	iorwf	_I2C_buffer+9,w	;volatile
   668  012C  0428               	iorwf	_I2C_buffer+8,w	;volatile
   669  012D  0427               	iorwf	_I2C_buffer+7,w	;volatile
   670  012E  1903               	btfsc	3,2
   671                           
   672                           ;main.c: 274: I2C_buffer.data.DETECTED = 0;
   673  012F  01A2               	clrf	_I2C_buffer+2	;volatile
   674  0130                     l1245:	
   675                           
   676                           ;main.c: 275: };main.c: 276: };main.c: 277: _delay((unsigned long)((1)*(32000000/4000.0)
      +                          ));
   677  0130  300B               	movlw	11
   678  0131  0020               	movlb	0	; select bank0
   679  0132  00B3               	movwf	??_main
   680  0133  3062               	movlw	98
   681  0134                     u537:	
   682  0134  0B89               	decfsz	9,f
   683  0135  2934               	goto	u537
   684  0136  0BB3               	decfsz	??_main,f
   685  0137  2934               	goto	u537
   686  0138  0000               	nop
   687  0139  28FC               	goto	l117
   688  013A                     __end_of_main:	
   689                           
   690                           	psect	text1
   691  013A                     __ptext1:	
   692 ;; *************** function _init_I2C_buffer *****************
   693 ;; Defined at:
   694 ;;		line 216 in file "main.c"
   695 ;; Parameters:    Size  Location     Type
   696 ;;		None
   697 ;; Auto vars:     Size  Location     Type
   698 ;;		None
   699 ;; Return value:  Size  Location     Type
   700 ;;                  1    wreg      void 
   701 ;; Registers used:
   702 ;;		wreg, status,2
   703 ;; Tracked objects:
   704 ;;		On entry : B1F/1
   705 ;;		On exit  : B1F/0
   706 ;;		Unchanged: B00/0
   707 ;; Data sizes:     COMMON   BANK0   BANK1
   708 ;;      Params:         0       0       0
   709 ;;      Locals:         0       0       0
   710 ;;      Temps:          1       0       0
   711 ;;      Totals:         1       0       0
   712 ;;Total ram usage:        1 bytes
   713 ;; Hardware stack levels used:    1
   714 ;; Hardware stack levels required when called:    1
   715 ;; This function calls:
   716 ;;		Nothing
   717 ;; This function is called by:
   718 ;;		_main
   719 ;; This function uses a non-reentrant model
   720 ;;
   721                           
   722                           
   723                           ;psect for function _init_I2C_buffer
   724  013A                     _init_I2C_buffer:	
   725                           
   726                           ;main.c: 218: I2C_buffer.data.ID = 0x01;
   727                           
   728                           ;incstack = 0
   729                           ; Regs used in _init_I2C_buffer: [wreg+status,2]
   730  013A  3001               	movlw	1
   731  013B  00F1               	movwf	??_init_I2C_buffer
   732  013C  0871               	movf	??_init_I2C_buffer,w
   733  013D  0020               	movlb	0	; select bank0
   734  013E  00A0               	movwf	_I2C_buffer	;volatile
   735                           
   736                           ;main.c: 219: I2C_buffer.data.TIMEOUT = 20000;
   737  013F  3000               	movlw	0
   738  0140  00A6               	movwf	_I2C_buffer+6	;volatile
   739  0141  3000               	movlw	0
   740  0142  00A5               	movwf	_I2C_buffer+5	;volatile
   741  0143  304E               	movlw	78
   742  0144  00A4               	movwf	_I2C_buffer+4	;volatile
   743  0145  3020               	movlw	32
   744  0146  00A3               	movwf	_I2C_buffer+3	;volatile
   745                           
   746                           ;main.c: 220: I2C_buffer.data.BEEP = 250;
   747  0147  3000               	movlw	0
   748  0148  00AC               	movwf	_I2C_buffer+12	;volatile
   749  0149  30FA               	movlw	250
   750  014A  00AB               	movwf	_I2C_buffer+11	;volatile
   751                           
   752                           ;main.c: 221: I2C_buffer.data.REMAIN = 0;
   753  014B  3000               	movlw	0
   754  014C  00AA               	movwf	_I2C_buffer+10	;volatile
   755  014D  3000               	movlw	0
   756  014E  00A9               	movwf	_I2C_buffer+9	;volatile
   757  014F  3000               	movlw	0
   758  0150  00A8               	movwf	_I2C_buffer+8	;volatile
   759  0151  3000               	movlw	0
   760  0152  00A7               	movwf	_I2C_buffer+7	;volatile
   761                           
   762                           ;main.c: 222: I2C_buffer.data.DETECTED = 0;
   763  0153  01A2               	clrf	_I2C_buffer+2	;volatile
   764                           
   765                           ;main.c: 223: I2C_buffer.data.BRIGHTNESS = 0;
   766  0154  01AD               	clrf	_I2C_buffer+13	;volatile
   767  0155  01AE               	clrf	_I2C_buffer+14	;volatile
   768                           
   769                           ;main.c: 224: I2C_buffer.data.RESET = 0;
   770  0156  01A1               	clrf	_I2C_buffer+1	;volatile
   771  0157  0008               	return
   772  0158                     __end_of_init_I2C_buffer:	
   773                           
   774                           	psect	text2
   775  0158                     __ptext2:	
   776 ;; *************** function _PWM_set_duty *****************
   777 ;; Defined at:
   778 ;;		line 207 in file "main.c"
   779 ;; Parameters:    Size  Location     Type
   780 ;;  duty            2    1[COMMON] unsigned int 
   781 ;; Auto vars:     Size  Location     Type
   782 ;;		None
   783 ;; Return value:  Size  Location     Type
   784 ;;                  1    wreg      void 
   785 ;; Registers used:
   786 ;;		wreg, status,2, status,0
   787 ;; Tracked objects:
   788 ;;		On entry : 1F/0
   789 ;;		On exit  : 1A/0
   790 ;;		Unchanged: 0/0
   791 ;; Data sizes:     COMMON   BANK0   BANK1
   792 ;;      Params:         2       0       0
   793 ;;      Locals:         0       0       0
   794 ;;      Temps:          2       0       0
   795 ;;      Totals:         4       0       0
   796 ;;Total ram usage:        4 bytes
   797 ;; Hardware stack levels used:    1
   798 ;; Hardware stack levels required when called:    1
   799 ;; This function calls:
   800 ;;		Nothing
   801 ;; This function is called by:
   802 ;;		_main
   803 ;; This function uses a non-reentrant model
   804 ;;
   805                           
   806                           
   807                           ;psect for function _PWM_set_duty
   808  0158                     _PWM_set_duty:	
   809                           
   810                           ;main.c: 209: if (duty < 1024) {
   811                           
   812                           ;incstack = 0
   813                           ; Regs used in _PWM_set_duty: [wreg+status,2+status,0]
   814  0158  3004               	movlw	4
   815  0159  0272               	subwf	PWM_set_duty@duty+1,w
   816  015A  3000               	movlw	0
   817  015B  1903               	skipnz
   818  015C  0271               	subwf	PWM_set_duty@duty,w
   819  015D  1803               	skipnc
   820  015E  0008               	return
   821                           
   822                           ;main.c: 210: CCPR1L = (0xFF & ((unsigned int) duty >> 2));
   823  015F  0872               	movf	PWM_set_duty@duty+1,w
   824  0160  00F4               	movwf	??_PWM_set_duty+1
   825  0161  0871               	movf	PWM_set_duty@duty,w
   826  0162  00F3               	movwf	??_PWM_set_duty
   827  0163  36F4               	lsrf	??_PWM_set_duty+1,f
   828  0164  0CF3               	rrf	??_PWM_set_duty,f
   829  0165  36F4               	lsrf	??_PWM_set_duty+1,f
   830  0166  0CF3               	rrf	??_PWM_set_duty,f
   831  0167  0873               	movf	??_PWM_set_duty,w
   832  0168  0025               	movlb	5	; select bank5
   833  0169  0091               	movwf	17	;volatile
   834                           
   835                           ;main.c: 211: CCP1CON = (0x0C | (0x30 & ((unsigned int) duty << 4)));
   836  016A  0871               	movf	PWM_set_duty@duty,w
   837  016B  00F3               	movwf	??_PWM_set_duty
   838  016C  3003               	movlw	3
   839  016D                     u265:	
   840  016D  35F3               	lslf	??_PWM_set_duty,f
   841  016E  3EFF               	addlw	-1
   842  016F  1D03               	skipz
   843  0170  296D               	goto	u265
   844  0171  3573               	lslf	??_PWM_set_duty,w
   845  0172  3930               	andlw	48
   846  0173  380C               	iorlw	12
   847  0174  0093               	movwf	19	;volatile
   848  0175  0008               	return
   849  0176                     __end_of_PWM_set_duty:	
   850                           
   851                           	psect	text3
   852  0176                     __ptext3:	
   853 ;; *************** function _PWM_Init *****************
   854 ;; Defined at:
   855 ;;		line 170 in file "main.c"
   856 ;; Parameters:    Size  Location     Type
   857 ;;		None
   858 ;; Auto vars:     Size  Location     Type
   859 ;;		None
   860 ;; Return value:  Size  Location     Type
   861 ;;                  1    wreg      void 
   862 ;; Registers used:
   863 ;;		wreg, status,2
   864 ;; Tracked objects:
   865 ;;		On entry : B1F/1
   866 ;;		On exit  : B1F/0
   867 ;;		Unchanged: B00/0
   868 ;; Data sizes:     COMMON   BANK0   BANK1
   869 ;;      Params:         0       0       0
   870 ;;      Locals:         0       0       0
   871 ;;      Temps:          0       0       0
   872 ;;      Totals:         0       0       0
   873 ;;Total ram usage:        0 bytes
   874 ;; Hardware stack levels used:    1
   875 ;; Hardware stack levels required when called:    1
   876 ;; This function calls:
   877 ;;		Nothing
   878 ;; This function is called by:
   879 ;;		_main
   880 ;; This function uses a non-reentrant model
   881 ;;
   882                           
   883                           
   884                           ;psect for function _PWM_Init
   885  0176                     _PWM_Init:	
   886                           
   887                           ;main.c: 191: PR2 = 0xFF;
   888                           
   889                           ;incstack = 0
   890                           ; Regs used in _PWM_Init: [wreg+status,2]
   891  0176  30FF               	movlw	255
   892  0177  0020               	movlb	0	; select bank0
   893  0178  009B               	movwf	27	;volatile
   894                           
   895                           ;main.c: 192: CCP1CON = 0b00001100;
   896  0179  300C               	movlw	12
   897  017A  0025               	movlb	5	; select bank5
   898  017B  0093               	movwf	19	;volatile
   899                           
   900                           ;main.c: 193: CCPR1L = 0b00000000;
   901  017C  0191               	clrf	17	;volatile
   902                           
   903                           ;main.c: 194: PIR1bits.TMR2IF = 0;
   904  017D  0020               	movlb	0	; select bank0
   905  017E  1091               	bcf	17,1	;volatile
   906                           
   907                           ;main.c: 195: T2CON = 0b00000100;
   908  017F  3004               	movlw	4
   909  0180  009C               	movwf	28	;volatile
   910  0181  0008               	return
   911  0182                     __end_of_PWM_Init:	
   912                           
   913                           	psect	intentry
   914  0004                     __pintentry:	
   915 ;; *************** function _isr *****************
   916 ;; Defined at:
   917 ;;		line 66 in file "main.c"
   918 ;; Parameters:    Size  Location     Type
   919 ;;		None
   920 ;; Auto vars:     Size  Location     Type
   921 ;;		None
   922 ;; Return value:  Size  Location     Type
   923 ;;                  1    wreg      void 
   924 ;; Registers used:
   925 ;;		wreg, fsr1l, fsr1h, status,2, status,0
   926 ;; Tracked objects:
   927 ;;		On entry : 0/0
   928 ;;		On exit  : 1F/0
   929 ;;		Unchanged: 0/0
   930 ;; Data sizes:     COMMON   BANK0   BANK1
   931 ;;      Params:         0       0       0
   932 ;;      Locals:         0       0       0
   933 ;;      Temps:          1       0       0
   934 ;;      Totals:         1       0       0
   935 ;;Total ram usage:        1 bytes
   936 ;; Hardware stack levels used:    1
   937 ;; This function calls:
   938 ;;		Nothing
   939 ;; This function is called by:
   940 ;;		Interrupt level 1
   941 ;; This function uses a non-reentrant model
   942 ;;
   943                           
   944  0004                     _isr:	
   945                           
   946                           ;incstack = 0
   947  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
   948                           
   949                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0]
   950  0005  3180               	pagesel	$
   951                           
   952                           ;main.c: 68: if (INTCONbits.IOCIF == 1 && IOCAFbits.IOCAF4 == 1)
   953  0006  1C0B               	btfss	11,0	;volatile
   954  0007  2812               	goto	i1l81
   955  0008  0027               	movlb	7	; select bank7
   956  0009  1E13               	btfss	19,4	;volatile
   957  000A  2812               	goto	i1l81
   958                           
   959                           ;main.c: 69: {;main.c: 70: INTCONbits.IOCIE = 0;
   960  000B  118B               	bcf	11,3	;volatile
   961                           
   962                           ;main.c: 71: trigger = 1;
   963  000C  0020               	movlb	0	; select bank0
   964  000D  01B2               	clrf	_trigger
   965  000E  0AB2               	incf	_trigger,f
   966                           
   967                           ;main.c: 72: IOCAFbits.IOCAF4 = 0;
   968  000F  0027               	movlb	7	; select bank7
   969  0010  1213               	bcf	19,4	;volatile
   970                           
   971                           ;main.c: 73: INTCONbits.IOCIE = 1;
   972  0011  158B               	bsf	11,3	;volatile
   973  0012                     i1l81:	
   974                           
   975                           ;main.c: 74: };main.c: 76: if (PIR1bits.TMR1IF == 1)
   976  0012  0020               	movlb	0	; select bank0
   977  0013  1C11               	btfss	17,0	;volatile
   978  0014  2844               	goto	i1l1025
   979                           
   980                           ;main.c: 77: {;main.c: 78: INTCONbits.IOCIE = 0;
   981  0015  118B               	bcf	11,3	;volatile
   982                           
   983                           ;main.c: 79: T1CONbits.TMR1ON = 0;
   984  0016  1018               	bcf	24,0	;volatile
   985                           
   986                           ;main.c: 80: if (trigger == 1 && PORTAbits.RA4 == 1)
   987  0017  0332               	decf	_trigger,w
   988  0018  1903               	btfsc	3,2
   989  0019  1E0C               	btfss	12,4	;volatile
   990  001A  282A               	goto	i1l1009
   991                           
   992                           ;main.c: 81: {;main.c: 82: pulseLenght++;
   993  001B  3001               	movlw	1
   994  001C  00F0               	movwf	??_isr
   995  001D  0870               	movf	??_isr,w
   996  001E  07B0               	addwf	_pulseLenght,f
   997                           
   998                           ;main.c: 83: if (pulseLenght >= 3)
   999  001F  3003               	movlw	3
  1000  0020  0230               	subwf	_pulseLenght,w
  1001  0021  1C03               	skipc
  1002  0022  282C               	goto	i1l1011
  1003                           
  1004                           ;main.c: 84: {;main.c: 85: pulseLenght = 0;
  1005  0023  01B0               	clrf	_pulseLenght
  1006                           
  1007                           ;main.c: 86: trigger = 0;
  1008  0024  01B2               	clrf	_trigger
  1009                           
  1010                           ;main.c: 87: pulses++;
  1011  0025  3001               	movlw	1
  1012  0026  00F0               	movwf	??_isr
  1013  0027  0870               	movf	??_isr,w
  1014  0028  07B1               	addwf	_pulses,f
  1015  0029  282C               	goto	i1l1011
  1016  002A                     i1l1009:	
  1017                           
  1018                           ;main.c: 90: trigger = 0;
  1019  002A  01B2               	clrf	_trigger
  1020                           
  1021                           ;main.c: 91: pulseLenght = 0;
  1022  002B  01B0               	clrf	_pulseLenght
  1023  002C                     i1l1011:	
  1024                           
  1025                           ;main.c: 92: };main.c: 93: if (pulses > 2)
  1026  002C  3003               	movlw	3
  1027  002D  0231               	subwf	_pulses,w
  1028  002E  1C03               	skipc
  1029  002F  2841               	goto	i1l1019
  1030                           
  1031                           ;main.c: 94: {;main.c: 95: I2C_buffer.data.DETECTED = 1;
  1032  0030  3001               	movlw	1
  1033  0031  00F0               	movwf	??_isr
  1034  0032  0870               	movf	??_isr,w
  1035  0033  00A2               	movwf	_I2C_buffer+2	;volatile
  1036                           
  1037                           ;main.c: 96: I2C_buffer.data.REMAIN = I2C_buffer.data.TIMEOUT;
  1038  0034  3003               	movlw	3
  1039  0035  3E20               	addlw	(low (_I2C_buffer| 0))& (0+255)
  1040  0036  0086               	movwf	6
  1041  0037  0187               	clrf	7
  1042  0038  3F40               	moviw [0]fsr1
  1043  0039  00A7               	movwf	_I2C_buffer+7	;volatile
  1044  003A  3F41               	moviw [1]fsr1
  1045  003B  00A8               	movwf	_I2C_buffer+8	;volatile
  1046  003C  3F42               	moviw [2]fsr1
  1047  003D  00A9               	movwf	_I2C_buffer+9	;volatile
  1048  003E  3F43               	moviw [3]fsr1
  1049  003F  00AA               	movwf	_I2C_buffer+10	;volatile
  1050                           
  1051                           ;main.c: 97: pulses = 0;
  1052  0040  01B1               	clrf	_pulses
  1053  0041                     i1l1019:	
  1054                           
  1055                           ;main.c: 98: };main.c: 99: INTCONbits.IOCIE = 1;
  1056  0041  158B               	bsf	11,3	;volatile
  1057                           
  1058                           ;main.c: 100: PIR1bits.TMR1IF = 0;
  1059  0042  1011               	bcf	17,0	;volatile
  1060                           
  1061                           ;main.c: 101: T1CONbits.TMR1ON = 1;
  1062  0043  1418               	bsf	24,0	;volatile
  1063  0044                     i1l1025:	
  1064                           
  1065                           ;main.c: 102: };main.c: 104: static unsigned char junk = 0;;main.c: 106: if (PIR1bits.SS
      +                          P1IF)
  1066  0044  1D91               	btfss	17,3	;volatile
  1067  0045  28AB               	goto	i1l1085
  1068                           
  1069                           ;main.c: 107: {;main.c: 108: INTCONbits.IOCIE = 0;
  1070  0046  118B               	bcf	11,3	;volatile
  1071                           
  1072                           ;main.c: 109: PIE1bits.TMR1IE = 0;
  1073  0047  0021               	movlb	1	; select bank1
  1074  0048  1011               	bcf	17,0	;volatile
  1075                           
  1076                           ;main.c: 110: if (SSP1STATbits.R_nW)
  1077  0049  0024               	movlb	4	; select bank4
  1078  004A  1D14               	btfss	20,2	;volatile
  1079  004B  2866               	goto	i1l1045
  1080                           
  1081                           ;main.c: 111: {;main.c: 112: if (!SSP1STATbits.D_nA)
  1082  004C  1A94               	btfsc	20,5	;volatile
  1083  004D  2859               	goto	i1l1037
  1084                           
  1085                           ;main.c: 113: {;main.c: 114: SSP1BUF = I2C_buffer.byte[index_i2c++];
  1086  004E  0879               	movf	_index_i2c,w
  1087  004F  3E20               	addlw	(low (_I2C_buffer| 0))& (0+255)
  1088  0050  0086               	movwf	6
  1089  0051  0187               	clrf	7
  1090  0052  0801               	movf	1,w
  1091  0053  0091               	movwf	17	;volatile
  1092  0054  3001               	movlw	1
  1093  0055  00F0               	movwf	??_isr
  1094  0056  0870               	movf	??_isr,w
  1095  0057  07F9               	addwf	_index_i2c,f
  1096                           
  1097                           ;main.c: 115: SSP1CON1bits.CKP = 1;
  1098  0058  1615               	bsf	21,4	;volatile
  1099  0059                     i1l1037:	
  1100                           
  1101                           ;main.c: 116: };main.c: 117: if (SSP1STATbits.D_nA)
  1102  0059  1E94               	btfss	20,5	;volatile
  1103  005A  2866               	goto	i1l1045
  1104                           
  1105                           ;main.c: 118: {;main.c: 119: SSP1BUF = I2C_buffer.byte[index_i2c++];
  1106  005B  0879               	movf	_index_i2c,w
  1107  005C  3E20               	addlw	(low (_I2C_buffer| 0))& (0+255)
  1108  005D  0086               	movwf	6
  1109  005E  0187               	clrf	7
  1110  005F  0801               	movf	1,w
  1111  0060  0091               	movwf	17	;volatile
  1112  0061  3001               	movlw	1
  1113  0062  00F0               	movwf	??_isr
  1114  0063  0870               	movf	??_isr,w
  1115  0064  07F9               	addwf	_index_i2c,f
  1116                           
  1117                           ;main.c: 120: SSP1CON1bits.CKP = 1;
  1118  0065  1615               	bsf	21,4	;volatile
  1119  0066                     i1l1045:	
  1120                           
  1121                           ;main.c: 121: };main.c: 122: };main.c: 123: if (!SSP1STATbits.R_nW)
  1122  0066  1914               	btfsc	20,2	;volatile
  1123  0067  28A6               	goto	i1l1079
  1124                           
  1125                           ;main.c: 124: {;main.c: 125: if (!SSP1STATbits.D_nA)
  1126  0068  1A94               	btfsc	20,5	;volatile
  1127  0069  2875               	goto	i1l1055
  1128                           
  1129                           ;main.c: 126: {;main.c: 127: first_i2c = 1;
  1130  006A  0020               	movlb	0	; select bank0
  1131  006B  01B7               	clrf	_first_i2c
  1132  006C  0AB7               	incf	_first_i2c,f
  1133                           
  1134                           ;main.c: 128: junk = SSP1BUF;
  1135  006D  0024               	movlb	4	; select bank4
  1136  006E  0811               	movf	17,w	;volatile
  1137  006F  00F0               	movwf	??_isr
  1138  0070  0870               	movf	??_isr,w
  1139  0071  0020               	movlb	0	; select bank0
  1140  0072  00AF               	movwf	isr@junk
  1141                           
  1142                           ;main.c: 129: SSP1CON1bits.CKP = 1;
  1143  0073  0024               	movlb	4	; select bank4
  1144  0074  1615               	bsf	21,4	;volatile
  1145  0075                     i1l1055:	
  1146                           
  1147                           ;main.c: 130: };main.c: 131: if (SSP1STATbits.D_nA)
  1148  0075  1E94               	btfss	20,5	;volatile
  1149  0076  28A6               	goto	i1l1079
  1150                           
  1151                           ;main.c: 132: {;main.c: 133: if (first_i2c) {
  1152  0077  0020               	movlb	0	; select bank0
  1153  0078  0837               	movf	_first_i2c,w
  1154  0079  1903               	btfsc	3,2
  1155  007A  2883               	goto	i1l1063
  1156                           
  1157                           ;main.c: 134: index_i2c = SSP1BUF;
  1158  007B  0024               	movlb	4	; select bank4
  1159  007C  0811               	movf	17,w	;volatile
  1160  007D  00F0               	movwf	??_isr
  1161  007E  0870               	movf	??_isr,w
  1162  007F  00F9               	movwf	_index_i2c
  1163                           
  1164                           ;main.c: 135: first_i2c = 0;
  1165  0080  0020               	movlb	0	; select bank0
  1166  0081  01B7               	clrf	_first_i2c
  1167                           
  1168                           ;main.c: 136: }
  1169  0082  289B               	goto	i1l1071
  1170  0083                     i1l1063:	
  1171                           
  1172                           ;main.c: 138: else {;main.c: 139: if (index_i2c < RX_ELMNTS)
  1173  0083  300F               	movlw	15
  1174  0084  0279               	subwf	_index_i2c,w
  1175  0085  1803               	skipnc
  1176  0086  2895               	goto	i1l1069
  1177                           
  1178                           ;main.c: 140: {;main.c: 141: I2C_buffer.byte[index_i2c++] = SSP1BUF;
  1179  0087  0024               	movlb	4	; select bank4
  1180  0088  0811               	movf	17,w	;volatile
  1181  0089  00F0               	movwf	??_isr
  1182  008A  0879               	movf	_index_i2c,w
  1183  008B  3E20               	addlw	(low (_I2C_buffer| 0))& (0+255)
  1184  008C  0086               	movwf	6
  1185  008D  0187               	clrf	7
  1186  008E  0870               	movf	??_isr,w
  1187  008F  0081               	movwf	1
  1188  0090  3001               	movlw	1
  1189  0091  00F0               	movwf	??_isr
  1190  0092  0870               	movf	??_isr,w
  1191  0093  07F9               	addwf	_index_i2c,f
  1192                           
  1193                           ;main.c: 142: } else {
  1194  0094  289B               	goto	i1l1071
  1195  0095                     i1l1069:	
  1196                           
  1197                           ;main.c: 143: junk = SSP1BUF;
  1198  0095  0024               	movlb	4	; select bank4
  1199  0096  0811               	movf	17,w	;volatile
  1200  0097  00F0               	movwf	??_isr
  1201  0098  0870               	movf	??_isr,w
  1202  0099  0020               	movlb	0	; select bank0
  1203  009A  00AF               	movwf	isr@junk
  1204  009B                     i1l1071:	
  1205                           
  1206                           ;main.c: 144: };main.c: 145: };main.c: 146: if (SSP1CON1bits.WCOL)
  1207  009B  0024               	movlb	4	; select bank4
  1208  009C  1F95               	btfss	21,7	;volatile
  1209  009D  28A4               	goto	i1l1077
  1210                           
  1211                           ;main.c: 147: {;main.c: 148: SSP1CON1bits.WCOL = 0;
  1212  009E  1395               	bcf	21,7	;volatile
  1213                           
  1214                           ;main.c: 149: junk = SSP1BUF;
  1215  009F  0811               	movf	17,w	;volatile
  1216  00A0  00F0               	movwf	??_isr
  1217  00A1  0870               	movf	??_isr,w
  1218  00A2  0020               	movlb	0	; select bank0
  1219  00A3  00AF               	movwf	isr@junk
  1220  00A4                     i1l1077:	
  1221                           
  1222                           ;main.c: 150: };main.c: 151: SSP1CON1bits.CKP = 1;
  1223  00A4  0024               	movlb	4	; select bank4
  1224  00A5  1615               	bsf	21,4	;volatile
  1225  00A6                     i1l1079:	
  1226                           
  1227                           ;main.c: 152: };main.c: 153: };main.c: 154: PIR1bits.SSP1IF = 0;
  1228  00A6  0020               	movlb	0	; select bank0
  1229  00A7  1191               	bcf	17,3	;volatile
  1230                           
  1231                           ;main.c: 155: INTCONbits.IOCIE = 1;
  1232  00A8  158B               	bsf	11,3	;volatile
  1233                           
  1234                           ;main.c: 156: PIE1bits.TMR1IE = 1;
  1235  00A9  0021               	movlb	1	; select bank1
  1236  00AA  1411               	bsf	17,0	;volatile
  1237  00AB                     i1l1085:	
  1238                           
  1239                           ;main.c: 157: };main.c: 159: if (PIR2bits.BCL1IF)
  1240  00AB  0020               	movlb	0	; select bank0
  1241  00AC  1D92               	btfss	18,3	;volatile
  1242  00AD  28B9               	goto	i1l102
  1243                           
  1244                           ;main.c: 160: {;main.c: 161: junk = SSP1BUF;
  1245  00AE  0024               	movlb	4	; select bank4
  1246  00AF  0811               	movf	17,w	;volatile
  1247  00B0  00F0               	movwf	??_isr
  1248  00B1  0870               	movf	??_isr,w
  1249  00B2  0020               	movlb	0	; select bank0
  1250  00B3  00AF               	movwf	isr@junk
  1251                           
  1252                           ;main.c: 162: PIR2bits.BCL1IF = 0;
  1253  00B4  1192               	bcf	18,3	;volatile
  1254                           
  1255                           ;main.c: 163: SSP1CON1bits.CKP = 1;
  1256  00B5  0024               	movlb	4	; select bank4
  1257  00B6  1615               	bsf	21,4	;volatile
  1258                           
  1259                           ;main.c: 164: PIR1bits.SSP1IF = 0;
  1260  00B7  0020               	movlb	0	; select bank0
  1261  00B8  1191               	bcf	17,3	;volatile
  1262  00B9                     i1l102:	
  1263  00B9  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  1264  00BA  0009               	retfie
  1265  00BB                     __end_of_isr:	
  1266  007E                     btemp	set	126	;btemp
  1267  007E                     int$flags	set	126
  1268  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    1
    Data        1
    BSS         20
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      10
    BANK0            80      4      24
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_PWM_set_duty

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     4      4     218
                                              5 COMMON     4     0      4
                                              0 BANK0      4     4      0
                           _PWM_Init
                       _PWM_set_duty
                    _init_I2C_buffer
 ---------------------------------------------------------------------------------
 (1) _init_I2C_buffer                                      1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PWM_set_duty                                         4     2      2     218
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PWM_Init
   _PWM_set_duty
   _init_I2C_buffer

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      22       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      4      18       6       30.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      22       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Jan 16 18:32:55 2020

             _pulseLenght 0030               __CFG_CP$OFF 0000                       l117 00FC  
                     l119 0114                       _PR2 001B                       u265 016D  
            __CFG_CPD$OFF 0000                       u537 0134                       _isr 0004  
            __CFG_BORV$LO 0000                       wreg 0009              __CFG_LVP$OFF 0000  
                    l1245 0130                      l1239 0116                      ?_isr 0070  
            __CFG_WDTE$ON 0000                      i1l81 0012                      _WPUA 020C  
            __CFG_WRT$OFF 0000                      _main 00C8                      fsr0h 0005  
                    fsr1h 0007                      indf0 0000                      fsr0l 0004  
                    indf1 0001                      fsr1l 0006                      btemp 007E  
           __CFG_BOREN$ON 0000                      start 00BB             __CFG_IESO$OFF 0000  
           __CFG_MCLRE$ON 0000                     ??_isr 0070             __CFG_PLLEN$ON 0000  
   __size_of_PWM_set_duty 001E                     ?_main 0075                     _T1CON 0018  
                   _T2CON 001C                     i1l102 00B9                     _TRISA 008C  
           __CFG_PWRTE$ON 0000            __CFG_FCMEN$OFF 0000          __end_of_PWM_Init 0182  
                   status 0003                     wtemp0 007E              _PWM_set_duty 0158  
         __initialization 00BC              __end_of_main 013A                    ??_main 0033  
                  _CCPR1L 0291                    _ANSELA 018C                    i1l1011 002C  
                  i1l1009 002A                    i1l1025 0044                    i1l1019 0041  
                  i1l1037 0059                    i1l1045 0066                    i1l1071 009B  
                  i1l1063 0083                    i1l1055 0075                    i1l1077 00A4  
                  i1l1069 0095                    i1l1085 00AB                    i1l1079 00A6  
                  _INTCON 000B                    _OSCCON 0099            __CFG_STVREN$ON 0000  
                  _pulses 0031  __size_of_init_I2C_buffer 001E         __end_of_RX_ELMNTS 018A  
 __end_of__initialization 00C5            __pcstackCOMMON 0070              __pidataBANK0 0188  
               ?_PWM_Init 0070            _OPTION_REGbits 0095                __pbssBANK0 0020  
              __pmaintext 00C8                __pintentry 0004                   _CCP1CON 0293  
              ??_PWM_Init 0071                   _SSP1ADD 0212                   _SSP1BUF 0211  
       ??_init_I2C_buffer 0071          PWM_set_duty@duty 0071                   __ptext1 013A  
                 __ptext2 0158                   __ptext3 0176                 _T1CONbits 0018  
            __size_of_isr 00B7                 _IOCAFbits 0393                 _IOCAPbits 0391  
                 _trigger 0032                   clrloop0 0183      end_of_initialization 00C5  
                 isr@junk 002F                 _PORTAbits 000C          __CFG_FOSC$INTOSC 0000  
               _RX_ELMNTS 0189         __size_of_PWM_Init 000C       start_initialization 00BC  
             __end_of_isr 00BB               __pdataBANK0 0037           _init_I2C_buffer 013A  
             __pbssCOMMON 0079                 ___latbits 0000             __pcstackBANK0 0033  
           ?_PWM_set_duty 0071                 _first_i2c 0037                 _index_i2c 0079  
                _LATAbits 010C                 clear_ram0 0182                  _PIE1bits 0091  
                _PIE2bits 0092            ??_PWM_set_duty 0073                  _PIR1bits 0011  
                _PIR2bits 0012   __end_of_init_I2C_buffer 0158                  _SSP1CON1 0215  
                _SSP1STAT 0214                  _PWM_Init 0176                _I2C_buffer 0020  
              _APFCONbits 011D              _SSP1CON1bits 0215              _SSP1CON2bits 0216  
            _SSP1CON3bits 0217             __size_of_main 0072          ?_init_I2C_buffer 0070  
                int$flags 007E                  main@argc 0075                  main@argv 0077  
            _SSP1STATbits 0214                _INTCONbits 000B      __end_of_PWM_set_duty 0176  
                intlevel1 0000         __CFG_CLKOUTEN$OFF 0000             __pstringtext1 0189  
