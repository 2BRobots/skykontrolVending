

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Jan 13 21:59:51 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	12F1822
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 2.10
    21                           ; Generated 31/07/2019 GMT
    22                           ; 
    23                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC12F1822 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  0011                     	;# 
    68  0012                     	;# 
    69  0015                     	;# 
    70  0016                     	;# 
    71  0016                     	;# 
    72  0017                     	;# 
    73  0018                     	;# 
    74  0019                     	;# 
    75  001A                     	;# 
    76  001B                     	;# 
    77  001C                     	;# 
    78  001E                     	;# 
    79  001F                     	;# 
    80  008C                     	;# 
    81  0091                     	;# 
    82  0092                     	;# 
    83  0095                     	;# 
    84  0096                     	;# 
    85  0097                     	;# 
    86  0098                     	;# 
    87  0099                     	;# 
    88  009A                     	;# 
    89  009B                     	;# 
    90  009B                     	;# 
    91  009C                     	;# 
    92  009D                     	;# 
    93  009E                     	;# 
    94  010C                     	;# 
    95  0111                     	;# 
    96  0112                     	;# 
    97  0115                     	;# 
    98  0116                     	;# 
    99  0117                     	;# 
   100  0118                     	;# 
   101  0119                     	;# 
   102  011A                     	;# 
   103  011B                     	;# 
   104  011D                     	;# 
   105  011D                     	;# 
   106  018C                     	;# 
   107  0191                     	;# 
   108  0191                     	;# 
   109  0192                     	;# 
   110  0193                     	;# 
   111  0193                     	;# 
   112  0193                     	;# 
   113  0194                     	;# 
   114  0195                     	;# 
   115  0196                     	;# 
   116  0199                     	;# 
   117  019A                     	;# 
   118  019B                     	;# 
   119  019B                     	;# 
   120  019B                     	;# 
   121  019B                     	;# 
   122  019C                     	;# 
   123  019C                     	;# 
   124  019D                     	;# 
   125  019E                     	;# 
   126  019F                     	;# 
   127  020C                     	;# 
   128  0211                     	;# 
   129  0211                     	;# 
   130  0212                     	;# 
   131  0212                     	;# 
   132  0213                     	;# 
   133  0213                     	;# 
   134  0214                     	;# 
   135  0214                     	;# 
   136  0215                     	;# 
   137  0215                     	;# 
   138  0215                     	;# 
   139  0216                     	;# 
   140  0216                     	;# 
   141  0217                     	;# 
   142  0217                     	;# 
   143  0291                     	;# 
   144  0291                     	;# 
   145  0292                     	;# 
   146  0293                     	;# 
   147  0294                     	;# 
   148  0295                     	;# 
   149  0295                     	;# 
   150  0296                     	;# 
   151  0391                     	;# 
   152  0392                     	;# 
   153  0393                     	;# 
   154  039A                     	;# 
   155  039C                     	;# 
   156  039D                     	;# 
   157  039E                     	;# 
   158  039F                     	;# 
   159  0FE4                     	;# 
   160  0FE5                     	;# 
   161  0FE6                     	;# 
   162  0FE7                     	;# 
   163  0FE8                     	;# 
   164  0FE9                     	;# 
   165  0FEA                     	;# 
   166  0FEB                     	;# 
   167  0FED                     	;# 
   168  0FEE                     	;# 
   169  0FEF                     	;# 
   170  0000                     	;# 
   171  0001                     	;# 
   172  0002                     	;# 
   173  0003                     	;# 
   174  0004                     	;# 
   175  0005                     	;# 
   176  0006                     	;# 
   177  0007                     	;# 
   178  0008                     	;# 
   179  0009                     	;# 
   180  000A                     	;# 
   181  000B                     	;# 
   182  000C                     	;# 
   183  0011                     	;# 
   184  0012                     	;# 
   185  0015                     	;# 
   186  0016                     	;# 
   187  0016                     	;# 
   188  0017                     	;# 
   189  0018                     	;# 
   190  0019                     	;# 
   191  001A                     	;# 
   192  001B                     	;# 
   193  001C                     	;# 
   194  001E                     	;# 
   195  001F                     	;# 
   196  008C                     	;# 
   197  0091                     	;# 
   198  0092                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0097                     	;# 
   202  0098                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  010C                     	;# 
   211  0111                     	;# 
   212  0112                     	;# 
   213  0115                     	;# 
   214  0116                     	;# 
   215  0117                     	;# 
   216  0118                     	;# 
   217  0119                     	;# 
   218  011A                     	;# 
   219  011B                     	;# 
   220  011D                     	;# 
   221  011D                     	;# 
   222  018C                     	;# 
   223  0191                     	;# 
   224  0191                     	;# 
   225  0192                     	;# 
   226  0193                     	;# 
   227  0193                     	;# 
   228  0193                     	;# 
   229  0194                     	;# 
   230  0195                     	;# 
   231  0196                     	;# 
   232  0199                     	;# 
   233  019A                     	;# 
   234  019B                     	;# 
   235  019B                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019C                     	;# 
   239  019C                     	;# 
   240  019D                     	;# 
   241  019E                     	;# 
   242  019F                     	;# 
   243  020C                     	;# 
   244  0211                     	;# 
   245  0211                     	;# 
   246  0212                     	;# 
   247  0212                     	;# 
   248  0213                     	;# 
   249  0213                     	;# 
   250  0214                     	;# 
   251  0214                     	;# 
   252  0215                     	;# 
   253  0215                     	;# 
   254  0215                     	;# 
   255  0216                     	;# 
   256  0216                     	;# 
   257  0217                     	;# 
   258  0217                     	;# 
   259  0291                     	;# 
   260  0291                     	;# 
   261  0292                     	;# 
   262  0293                     	;# 
   263  0294                     	;# 
   264  0295                     	;# 
   265  0295                     	;# 
   266  0296                     	;# 
   267  0391                     	;# 
   268  0392                     	;# 
   269  0393                     	;# 
   270  039A                     	;# 
   271  039C                     	;# 
   272  039D                     	;# 
   273  039E                     	;# 
   274  039F                     	;# 
   275  0FE4                     	;# 
   276  0FE5                     	;# 
   277  0FE6                     	;# 
   278  0FE7                     	;# 
   279  0FE8                     	;# 
   280  0FE9                     	;# 
   281  0FEA                     	;# 
   282  0FEB                     	;# 
   283  0FED                     	;# 
   284  0FEE                     	;# 
   285  0FEF                     	;# 
   286                           
   287                           	psect	idataCOMMON
   288  014D                     __pidataCOMMON:	
   289                           
   290                           ;initializer for _dir
   291  014D  3401               	retlw	1
   292                           
   293                           ;initializer for _first_i2c
   294  014E  3401               	retlw	1
   295                           
   296                           	psect	stringtext1
   297  014F                     __pstringtext1:	
   298  014F                     _RX_ELMNTS:	
   299  014F  3406               	retlw	6
   300  0150                     __end_of_RX_ELMNTS:	
   301  0018                     _T1CON	set	24
   302  000B                     _INTCON	set	11
   303  0012                     _PIR2bits	set	18
   304  000B                     _INTCONbits	set	11
   305  0018                     _T1CONbits	set	24
   306  001C                     _T2CON	set	28
   307  0011                     _PIR1bits	set	17
   308  001B                     _PR2	set	27
   309  0092                     _PIE2bits	set	146
   310  009E                     _ADCON1	set	158
   311  0095                     _OPTION_REGbits	set	149
   312  008C                     _TRISA	set	140
   313  0099                     _OSCCON	set	153
   314  0091                     _PIE1bits	set	145
   315  009B                     _ADRESL	set	155
   316  009C                     _ADRESH	set	156
   317  009D                     _ADCON0bits	set	157
   318  009D                     _ADCON0	set	157
   319  011D                     _APFCONbits	set	285
   320  018C                     _ANSELA	set	396
   321  0212                     _SSP1ADD	set	530
   322  0217                     _SSP1CON3bits	set	535
   323  0216                     _SSP1CON2bits	set	534
   324  0215                     _SSP1CON1	set	533
   325  0214                     _SSP1STAT	set	532
   326  020C                     _WPUA	set	524
   327  0215                     _SSP1CON1bits	set	533
   328  0211                     _SSP1BUF	set	529
   329  0214                     _SSP1STATbits	set	532
   330  0291                     _CCPR1L	set	657
   331  0293                     _CCP1CON	set	659
   332                           
   333                           ; #config settings
   334  0000                     
   335                           	psect	cinit
   336  00B1                     start_initialization:	
   337  00B1                     __initialization:	
   338                           
   339                           ; Initialize objects allocated to COMMON
   340  00B1  214D               	fcall	__pidataCOMMON	;fetch initializer
   341  00B2  00F8               	movwf	__pdataCOMMON& (0+127)
   342  00B3  214E               	fcall	__pidataCOMMON+1	;fetch initializer
   343  00B4  00F9               	movwf	(__pdataCOMMON+1)& (0+127)
   344                           
   345                           ; Clear objects allocated to COMMON
   346  00B5  01FA               	clrf	__pbssCOMMON& (0+127)
   347                           
   348                           ; Clear objects allocated to BANK0
   349  00B6  01A0               	clrf	__pbssBANK0& (0+127)
   350  00B7  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   351  00B8  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   352  00B9  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   353  00BA  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   354  00BB  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   355  00BC  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   356  00BD  01A7               	clrf	(__pbssBANK0+7)& (0+127)
   357  00BE  01A8               	clrf	(__pbssBANK0+8)& (0+127)
   358  00BF                     end_of_initialization:	
   359                           ;End of C runtime variable initialization code
   360                           
   361  00BF                     __end_of__initialization:	
   362  00BF  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   363  00C0  0020               	movlb	0
   364  00C1  28C2               	ljmp	_main	;jump to C main() function
   365                           
   366                           	psect	bssCOMMON
   367  007A                     __pbssCOMMON:	
   368  007A                     _index_i2c:	
   369  007A                     	ds	1
   370                           
   371                           	psect	dataCOMMON
   372  0078                     __pdataCOMMON:	
   373  0078                     _dir:	
   374  0078                     	ds	1
   375  0079                     _first_i2c:	
   376  0079                     	ds	1
   377                           
   378                           	psect	bssBANK0
   379  0020                     __pbssBANK0:	
   380  0020                     _I2C_buffer:	
   381  0020                     	ds	6
   382  0026                     _ledDim:	
   383  0026                     	ds	2
   384  0028                     isr@junk:	
   385  0028                     	ds	1
   386                           
   387                           	psect	cstackCOMMON
   388  0070                     __pcstackCOMMON:	
   389  0070                     ?_PWM_Init:	
   390  0070                     ?_PWM_set_duty:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ?_init_I2C_buffer:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ?_isr:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0070                     PWM_set_duty@duty:	
   400                           ; 1 bytes @ 0x0
   401                           
   402                           
   403                           ; 2 bytes @ 0x0
   404  0070                     	ds	2
   405  0072                     ??_PWM_set_duty:	
   406  0072                     ??_isr:	
   407                           ; 1 bytes @ 0x2
   408                           
   409                           
   410                           ; 1 bytes @ 0x2
   411  0072                     	ds	1
   412  0073                     ??_PWM_Init:	
   413  0073                     ??_init_I2C_buffer:	
   414                           ; 1 bytes @ 0x3
   415                           
   416  0073                     ?_ADC_read:	
   417                           ; 1 bytes @ 0x3
   418                           
   419                           
   420                           ; 2 bytes @ 0x3
   421  0073                     	ds	2
   422  0075                     ??_ADC_read:	
   423                           
   424                           ; 1 bytes @ 0x5
   425  0075                     	ds	1
   426  0076                     ADC_read@channel:	
   427                           
   428                           ; 1 bytes @ 0x6
   429  0076                     	ds	1
   430  0077                     ??_main:	
   431                           
   432                           ; 1 bytes @ 0x7
   433  0077                     	ds	1
   434                           
   435                           	psect	cstackBANK0
   436  0029                     __pcstackBANK0:	
   437  0029                     ?_main:	
   438  0029                     main@argc:	
   439                           ; 2 bytes @ 0x0
   440                           
   441                           
   442                           ; 2 bytes @ 0x0
   443  0029                     	ds	2
   444  002B                     main@argv:	
   445                           
   446                           ; 2 bytes @ 0x2
   447  002B                     	ds	2
   448                           
   449                           	psect	maintext
   450  00C2                     __pmaintext:	
   451 ;;
   452 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   453 ;;
   454 ;; *************** function _main *****************
   455 ;; Defined at:
   456 ;;		line 212 in file "main.c"
   457 ;; Parameters:    Size  Location     Type
   458 ;;  argc            2    0[BANK0 ] int 
   459 ;;  argv            2    2[BANK0 ] PTR PTR unsigned char 
   460 ;; Auto vars:     Size  Location     Type
   461 ;;		None
   462 ;; Return value:  Size  Location     Type
   463 ;;                  2    0[BANK0 ] int 
   464 ;; Registers used:
   465 ;;		wreg, status,2, status,0, pclath, cstack
   466 ;; Tracked objects:
   467 ;;		On entry : B1F/0
   468 ;;		On exit  : 0/0
   469 ;;		Unchanged: 0/0
   470 ;; Data sizes:     COMMON   BANK0   BANK1
   471 ;;      Params:         0       4       0
   472 ;;      Locals:         0       0       0
   473 ;;      Temps:          1       0       0
   474 ;;      Totals:         1       4       0
   475 ;;Total ram usage:        5 bytes
   476 ;; Hardware stack levels required when called:    3
   477 ;; This function calls:
   478 ;;		_ADC_read
   479 ;;		_PWM_Init
   480 ;;		_init_I2C_buffer
   481 ;; This function is called by:
   482 ;;		Startup code after reset
   483 ;; This function uses a non-reentrant model
   484 ;;
   485                           
   486                           
   487                           ;psect for function _main
   488  00C2                     _main:	
   489                           
   490                           ;main.c: 213: OSCCON = 0b11110000;
   491                           
   492                           ;incstack = 0
   493                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   494  00C2  30F0               	movlw	240
   495  00C3  0021               	movlb	1	; select bank1
   496  00C4  0099               	movwf	25	;volatile
   497                           
   498                           ;main.c: 214: init_I2C_buffer();
   499  00C5  2137               	fcall	_init_I2C_buffer
   500                           
   501                           ;main.c: 215: TRISA = 0b00011111;
   502  00C6  301F               	movlw	31
   503  00C7  0021               	movlb	1	; select bank1
   504  00C8  008C               	movwf	12	;volatile
   505                           
   506                           ;main.c: 216: ANSELA = 0b00010001;
   507  00C9  3011               	movlw	17
   508  00CA  0023               	movlb	3	; select bank3
   509  00CB  008C               	movwf	12	;volatile
   510                           
   511                           ;main.c: 217: WPUA = 0b00001110;
   512  00CC  300E               	movlw	14
   513  00CD  0024               	movlb	4	; select bank4
   514  00CE  008C               	movwf	12	;volatile
   515                           
   516                           ;main.c: 218: OPTION_REGbits.nWPUEN = 1;
   517  00CF  0021               	movlb	1	; select bank1
   518  00D0  1795               	bsf	21,7	;volatile
   519                           
   520                           ;main.c: 219: APFCONbits.CCP1SEL = 1;
   521  00D1  0022               	movlb	2	; select bank2
   522  00D2  141D               	bsf	29,0	;volatile
   523                           
   524                           ;main.c: 220: ADCON1 = 0b11110000;
   525  00D3  30F0               	movlw	240
   526  00D4  0021               	movlb	1	; select bank1
   527  00D5  009E               	movwf	30	;volatile
   528                           
   529                           ;main.c: 221: SSP1STAT = 0b10000000;
   530  00D6  3080               	movlw	128
   531  00D7  0024               	movlb	4	; select bank4
   532  00D8  0094               	movwf	20	;volatile
   533                           
   534                           ;main.c: 222: SSP1CON1 = 0b00110110;
   535  00D9  3036               	movlw	54
   536  00DA  0095               	movwf	21	;volatile
   537                           
   538                           ;main.c: 223: SSP1CON2bits.SEN = 1;
   539  00DB  1416               	bsf	22,0	;volatile
   540                           
   541                           ;main.c: 224: SSP1CON3bits.BOEN = 1;
   542  00DC  1617               	bsf	23,4	;volatile
   543                           
   544                           ;main.c: 225: SSP1CON3bits.SDAHT = 1;
   545  00DD  1597               	bsf	23,3	;volatile
   546                           
   547                           ;main.c: 226: SSP1CON3bits.SBCDE = 1;
   548  00DE  1517               	bsf	23,2	;volatile
   549                           
   550                           ;main.c: 227: SSP1ADD = (char) (0x3E << 1);
   551  00DF  307C               	movlw	124
   552  00E0  0092               	movwf	18	;volatile
   553                           
   554                           ;main.c: 228: PIR1bits.SSP1IF = 0;
   555  00E1  0020               	movlb	0	; select bank0
   556  00E2  1191               	bcf	17,3	;volatile
   557                           
   558                           ;main.c: 229: PIR2bits.BCL1IF = 0;
   559  00E3  1192               	bcf	18,3	;volatile
   560                           
   561                           ;main.c: 230: PIE2bits.BCL1IE = 1;
   562  00E4  0021               	movlb	1	; select bank1
   563  00E5  1592               	bsf	18,3	;volatile
   564                           
   565                           ;main.c: 231: PIE1bits.SSP1IE = 1;
   566  00E6  1591               	bsf	17,3	;volatile
   567                           
   568                           ;main.c: 232: INTCONbits.PEIE = 1;
   569  00E7  170B               	bsf	11,6	;volatile
   570                           
   571                           ;main.c: 233: PWM_Init();
   572  00E8  212B               	fcall	_PWM_Init
   573                           
   574                           ;main.c: 234: INTCON = 0b01001000;
   575  00E9  3048               	movlw	72
   576  00EA  008B               	movwf	11	;volatile
   577                           
   578                           ;main.c: 235: T1CON = 0b00110100;
   579  00EB  3034               	movlw	52
   580  00EC  0098               	movwf	24	;volatile
   581                           
   582                           ;main.c: 236: PIE1bits.TMR1IE = 1;
   583  00ED  0021               	movlb	1	; select bank1
   584  00EE  1411               	bsf	17,0	;volatile
   585                           
   586                           ;main.c: 237: T1CONbits.TMR1ON = 1;
   587  00EF  0020               	movlb	0	; select bank0
   588  00F0  1418               	bsf	24,0	;volatile
   589                           
   590                           ;main.c: 238: INTCONbits.GIE = 1;
   591  00F1  178B               	bsf	11,7	;volatile
   592  00F2                     l122:	
   593                           ;main.c: 240: while (1) {
   594                           
   595  00F2  0064               	clrwdt	;# 
   596                           
   597                           ;main.c: 242: if (I2C_buffer.data.RESET == 1) {
   598  00F3  0020               	movlb	0	; select bank0
   599  00F4  0321               	decf	_I2C_buffer+1,w	;volatile
   600  00F5  1903               	btfsc	3,2
   601  00F6  0001               	reset	;# 
   602                           
   603                           ;main.c: 244: };main.c: 245: I2C_buffer.data.AN0 = ADC_read(0x00);
   604  00F7  3000               	movlw	0
   605  00F8  210E               	fcall	_ADC_read
   606  00F9  0874               	movf	?_ADC_read+1,w
   607  00FA  0020               	movlb	0	; select bank0
   608  00FB  00A3               	movwf	_I2C_buffer+3	;volatile
   609  00FC  0873               	movf	?_ADC_read,w
   610  00FD  00A2               	movwf	_I2C_buffer+2	;volatile
   611                           
   612                           ;main.c: 246: I2C_buffer.data.AN4 = ADC_read(0x03);
   613  00FE  3003               	movlw	3
   614  00FF  210E               	fcall	_ADC_read
   615  0100  0874               	movf	?_ADC_read+1,w
   616  0101  0020               	movlb	0	; select bank0
   617  0102  00A5               	movwf	_I2C_buffer+5	;volatile
   618  0103  0873               	movf	?_ADC_read,w
   619  0104  00A4               	movwf	_I2C_buffer+4	;volatile
   620                           
   621                           ;main.c: 247: _delay((unsigned long)((1)*(32000000/4000.0)));
   622  0105  300B               	movlw	11
   623  0106  00F7               	movwf	??_main
   624  0107  3062               	movlw	98
   625  0108                     u407:	
   626  0108  0B89               	decfsz	9,f
   627  0109  2908               	goto	u407
   628  010A  0BF7               	decfsz	??_main,f
   629  010B  2908               	goto	u407
   630  010C  3200               	nop2
   631  010D  28F2               	goto	l122
   632  010E                     __end_of_main:	
   633                           
   634                           	psect	text1
   635  0137                     __ptext1:	
   636 ;; *************** function _init_I2C_buffer *****************
   637 ;; Defined at:
   638 ;;		line 115 in file "main.c"
   639 ;; Parameters:    Size  Location     Type
   640 ;;		None
   641 ;; Auto vars:     Size  Location     Type
   642 ;;		None
   643 ;; Return value:  Size  Location     Type
   644 ;;                  1    wreg      void 
   645 ;; Registers used:
   646 ;;		wreg, status,2
   647 ;; Tracked objects:
   648 ;;		On entry : B1F/1
   649 ;;		On exit  : B1F/0
   650 ;;		Unchanged: B00/0
   651 ;; Data sizes:     COMMON   BANK0   BANK1
   652 ;;      Params:         0       0       0
   653 ;;      Locals:         0       0       0
   654 ;;      Temps:          1       0       0
   655 ;;      Totals:         1       0       0
   656 ;;Total ram usage:        1 bytes
   657 ;; Hardware stack levels used:    1
   658 ;; Hardware stack levels required when called:    2
   659 ;; This function calls:
   660 ;;		Nothing
   661 ;; This function is called by:
   662 ;;		_main
   663 ;; This function uses a non-reentrant model
   664 ;;
   665                           
   666                           
   667                           ;psect for function _init_I2C_buffer
   668  0137                     _init_I2C_buffer:	
   669                           
   670                           ;main.c: 117: I2C_buffer.data.ID = 0xF4;
   671                           
   672                           ;incstack = 0
   673                           ; Regs used in _init_I2C_buffer: [wreg+status,2]
   674  0137  30F4               	movlw	244
   675  0138  00F3               	movwf	??_init_I2C_buffer
   676  0139  0873               	movf	??_init_I2C_buffer,w
   677  013A  0020               	movlb	0	; select bank0
   678  013B  00A0               	movwf	_I2C_buffer	;volatile
   679                           
   680                           ;main.c: 118: I2C_buffer.data.RESET = 0;
   681  013C  01A1               	clrf	_I2C_buffer+1	;volatile
   682                           
   683                           ;main.c: 119: I2C_buffer.data.AN0 = 0;
   684  013D  01A2               	clrf	_I2C_buffer+2	;volatile
   685  013E  01A3               	clrf	_I2C_buffer+3	;volatile
   686                           
   687                           ;main.c: 120: I2C_buffer.data.AN4 = 0;
   688  013F  01A4               	clrf	_I2C_buffer+4	;volatile
   689  0140  01A5               	clrf	_I2C_buffer+5	;volatile
   690  0141  0008               	return
   691  0142                     __end_of_init_I2C_buffer:	
   692                           
   693                           	psect	text2
   694  012B                     __ptext2:	
   695 ;; *************** function _PWM_Init *****************
   696 ;; Defined at:
   697 ;;		line 60 in file "main.c"
   698 ;; Parameters:    Size  Location     Type
   699 ;;		None
   700 ;; Auto vars:     Size  Location     Type
   701 ;;		None
   702 ;; Return value:  Size  Location     Type
   703 ;;                  1    wreg      void 
   704 ;; Registers used:
   705 ;;		wreg, status,2
   706 ;; Tracked objects:
   707 ;;		On entry : B1F/1
   708 ;;		On exit  : B1F/0
   709 ;;		Unchanged: B00/0
   710 ;; Data sizes:     COMMON   BANK0   BANK1
   711 ;;      Params:         0       0       0
   712 ;;      Locals:         0       0       0
   713 ;;      Temps:          0       0       0
   714 ;;      Totals:         0       0       0
   715 ;;Total ram usage:        0 bytes
   716 ;; Hardware stack levels used:    1
   717 ;; Hardware stack levels required when called:    2
   718 ;; This function calls:
   719 ;;		Nothing
   720 ;; This function is called by:
   721 ;;		_main
   722 ;; This function uses a non-reentrant model
   723 ;;
   724                           
   725                           
   726                           ;psect for function _PWM_Init
   727  012B                     _PWM_Init:	
   728                           
   729                           ;main.c: 90: PR2 = 0x3F;
   730                           
   731                           ;incstack = 0
   732                           ; Regs used in _PWM_Init: [wreg+status,2]
   733  012B  303F               	movlw	63
   734  012C  0020               	movlb	0	; select bank0
   735  012D  009B               	movwf	27	;volatile
   736                           
   737                           ;main.c: 91: CCP1CON = 0b00001100;
   738  012E  300C               	movlw	12
   739  012F  0025               	movlb	5	; select bank5
   740  0130  0093               	movwf	19	;volatile
   741                           
   742                           ;main.c: 92: CCPR1L = 0b00000000;
   743  0131  0191               	clrf	17	;volatile
   744                           
   745                           ;main.c: 93: PIR1bits.TMR2IF = 0;
   746  0132  0020               	movlb	0	; select bank0
   747  0133  1091               	bcf	17,1	;volatile
   748                           
   749                           ;main.c: 94: T2CON = 0b00000100;
   750  0134  3004               	movlw	4
   751  0135  009C               	movwf	28	;volatile
   752  0136  0008               	return
   753  0137                     __end_of_PWM_Init:	
   754                           
   755                           	psect	text3
   756  010E                     __ptext3:	
   757 ;; *************** function _ADC_read *****************
   758 ;; Defined at:
   759 ;;		line 106 in file "main.c"
   760 ;; Parameters:    Size  Location     Type
   761 ;;  channel         1    wreg     unsigned char 
   762 ;; Auto vars:     Size  Location     Type
   763 ;;  channel         1    6[COMMON] unsigned char 
   764 ;; Return value:  Size  Location     Type
   765 ;;                  2    3[COMMON] unsigned int 
   766 ;; Registers used:
   767 ;;		wreg, status,2, status,0
   768 ;; Tracked objects:
   769 ;;		On entry : 0/0
   770 ;;		On exit  : 1F/1
   771 ;;		Unchanged: 0/0
   772 ;; Data sizes:     COMMON   BANK0   BANK1
   773 ;;      Params:         2       0       0
   774 ;;      Locals:         1       0       0
   775 ;;      Temps:          1       0       0
   776 ;;      Totals:         4       0       0
   777 ;;Total ram usage:        4 bytes
   778 ;; Hardware stack levels used:    1
   779 ;; Hardware stack levels required when called:    2
   780 ;; This function calls:
   781 ;;		Nothing
   782 ;; This function is called by:
   783 ;;		_main
   784 ;; This function uses a non-reentrant model
   785 ;;
   786                           
   787                           
   788                           ;psect for function _ADC_read
   789  010E                     _ADC_read:	
   790                           
   791                           ;incstack = 0
   792                           ; Regs used in _ADC_read: [wreg+status,2+status,0]
   793                           ;ADC_read@channel stored from wreg
   794  010E  00F6               	movwf	ADC_read@channel
   795                           
   796                           ;main.c: 107: ADCON0 = (unsigned char)(channel << 2);
   797  010F  0876               	movf	ADC_read@channel,w
   798  0110  00F5               	movwf	??_ADC_read
   799  0111  3001               	movlw	1
   800  0112                     u215:	
   801  0112  35F5               	lslf	??_ADC_read,f
   802  0113  3EFF               	addlw	-1
   803  0114  1D03               	skipz
   804  0115  2912               	goto	u215
   805  0116  3575               	lslf	??_ADC_read,w
   806  0117  0021               	movlb	1	; select bank1
   807  0118  009D               	movwf	29	;volatile
   808                           
   809                           ;main.c: 108: ADCON0bits.ADON = 1;
   810  0119  141D               	bsf	29,0	;volatile
   811                           
   812                           ;main.c: 109: _delay((unsigned long)((2)*(32000000/4000.0)));
   813  011A  3015               	movlw	21
   814  011B  00F5               	movwf	??_ADC_read
   815  011C  30C6               	movlw	198
   816  011D                     u417:	
   817  011D  0B89               	decfsz	9,f
   818  011E  291D               	goto	u417
   819  011F  0BF5               	decfsz	??_ADC_read,f
   820  0120  291D               	goto	u417
   821  0121  3200               	nop2
   822                           
   823                           ;main.c: 110: ADCON0bits.GO = 1;
   824  0122  0021               	movlb	1	; select bank1
   825  0123  149D               	bsf	29,1	;volatile
   826  0124                     l86:	
   827                           ;main.c: 111: while (ADCON0bits.GO);
   828                           
   829  0124  189D               	btfsc	29,1	;volatile
   830  0125  2924               	goto	l86
   831                           
   832                           ;main.c: 112: return (((unsigned int)ADRESH) << 8) | ((unsigned int)ADRESL & 0xFF);
   833  0126  081C               	movf	28,w	;volatile
   834  0127  00F4               	movwf	?_ADC_read+1
   835  0128  081B               	movf	27,w	;volatile
   836  0129  00F3               	movwf	?_ADC_read
   837  012A  0008               	return
   838  012B                     __end_of_ADC_read:	
   839                           
   840                           	psect	intentry
   841  0004                     __pintentry:	
   842 ;; *************** function _isr *****************
   843 ;; Defined at:
   844 ;;		line 125 in file "main.c"
   845 ;; Parameters:    Size  Location     Type
   846 ;;		None
   847 ;; Auto vars:     Size  Location     Type
   848 ;;		None
   849 ;; Return value:  Size  Location     Type
   850 ;;                  1    wreg      void 
   851 ;; Registers used:
   852 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   853 ;; Tracked objects:
   854 ;;		On entry : 0/0
   855 ;;		On exit  : 1F/0
   856 ;;		Unchanged: 0/0
   857 ;; Data sizes:     COMMON   BANK0   BANK1
   858 ;;      Params:         0       0       0
   859 ;;      Locals:         0       0       0
   860 ;;      Temps:          1       0       0
   861 ;;      Totals:         1       0       0
   862 ;;Total ram usage:        1 bytes
   863 ;; Hardware stack levels used:    1
   864 ;; Hardware stack levels required when called:    1
   865 ;; This function calls:
   866 ;;		_PWM_set_duty
   867 ;; This function is called by:
   868 ;;		Interrupt level 1
   869 ;; This function uses a non-reentrant model
   870 ;;
   871                           
   872  0004                     _isr:	
   873                           
   874                           ;incstack = 0
   875  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
   876                           
   877                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   878  0005  3180               	pagesel	$
   879                           
   880                           ;main.c: 127: if (PIR1bits.TMR1IF == 1)
   881  0006  0020               	movlb	0	; select bank0
   882  0007  1C11               	btfss	17,0	;volatile
   883  0008  2840               	goto	i1l1022
   884                           
   885                           ;main.c: 128: {;main.c: 129: T1CONbits.TMR1ON = 0;
   886  0009  1018               	bcf	24,0	;volatile
   887                           
   888                           ;main.c: 130: if (dir == 1) {
   889  000A  0378               	decf	_dir,w
   890  000B  1D03               	btfss	3,2
   891  000C  2823               	goto	i1l1010
   892                           
   893                           ;main.c: 131: ledDim += 2;
   894  000D  3002               	movlw	2
   895  000E  07A6               	addwf	_ledDim,f
   896  000F  3000               	movlw	0
   897  0010  3DA7               	addwfc	_ledDim+1,f
   898                           
   899                           ;main.c: 132: if (ledDim >= 50) {
   900  0011  0827               	movf	_ledDim+1,w
   901  0012  3A80               	xorlw	128
   902  0013  00F2               	movwf	??_isr
   903  0014  3080               	movlw	128
   904  0015  0272               	subwf	??_isr,w
   905  0016  1D03               	skipz
   906  0017  281A               	goto	u25_25
   907  0018  3032               	movlw	50
   908  0019  0226               	subwf	_ledDim,w
   909  001A                     u25_25:	
   910  001A  1C03               	skipc
   911  001B  2837               	goto	i1l1016
   912                           
   913                           ;main.c: 133: ledDim = 50;
   914  001C  3032               	movlw	50
   915  001D  0020               	movlb	0	; select bank0
   916  001E  00A6               	movwf	_ledDim
   917  001F  3000               	movlw	0
   918  0020  00A7               	movwf	_ledDim+1
   919                           
   920                           ;main.c: 134: dir = 0;
   921  0021  01F8               	clrf	_dir
   922  0022  2837               	goto	i1l1016
   923  0023                     i1l1010:	
   924                           
   925                           ;main.c: 137: ledDim -= 2;
   926  0023  30FE               	movlw	254
   927  0024  07A6               	addwf	_ledDim,f
   928  0025  30FF               	movlw	255
   929  0026  3DA7               	addwfc	_ledDim+1,f
   930                           
   931                           ;main.c: 138: if (ledDim <= 0) {
   932  0027  0827               	movf	_ledDim+1,w
   933  0028  3A80               	xorlw	128
   934  0029  00F2               	movwf	??_isr
   935  002A  3080               	movlw	128
   936  002B  0272               	subwf	??_isr,w
   937  002C  1D03               	skipz
   938  002D  2830               	goto	u26_25
   939  002E  3001               	movlw	1
   940  002F  0226               	subwf	_ledDim,w
   941  0030                     u26_25:	
   942  0030  1803               	skipnc
   943  0031  2837               	goto	i1l1016
   944                           
   945                           ;main.c: 139: ledDim = 0;
   946  0032  0020               	movlb	0	; select bank0
   947  0033  01A6               	clrf	_ledDim
   948  0034  01A7               	clrf	_ledDim+1
   949                           
   950                           ;main.c: 140: dir = 1;
   951  0035  01F8               	clrf	_dir
   952  0036  0AF8               	incf	_dir,f
   953  0037                     i1l1016:	
   954                           
   955                           ;main.c: 141: };main.c: 142: };main.c: 143: PWM_set_duty((unsigned int) ledDim);
   956  0037  0020               	movlb	0	; select bank0
   957  0038  0827               	movf	_ledDim+1,w
   958  0039  00F1               	movwf	PWM_set_duty@duty+1
   959  003A  0826               	movf	_ledDim,w
   960  003B  00F0               	movwf	PWM_set_duty@duty
   961  003C  2142               	fcall	_PWM_set_duty
   962                           
   963                           ;main.c: 144: PIR1bits.TMR1IF = 0;
   964  003D  0020               	movlb	0	; select bank0
   965  003E  1011               	bcf	17,0	;volatile
   966                           
   967                           ;main.c: 145: T1CONbits.TMR1ON = 1;
   968  003F  1418               	bsf	24,0	;volatile
   969  0040                     i1l1022:	
   970                           
   971                           ;main.c: 146: };main.c: 148: static unsigned char junk = 0;;main.c: 150: if (PIR1bits.SS
      +                          P1IF)
   972  0040  1D91               	btfss	17,3	;volatile
   973  0041  28A0               	goto	i1l1082
   974                           
   975                           ;main.c: 151: {;main.c: 152: INTCONbits.IOCIE = 0;
   976  0042  118B               	bcf	11,3	;volatile
   977                           
   978                           ;main.c: 153: PIE1bits.TMR1IE = 0;
   979  0043  0021               	movlb	1	; select bank1
   980  0044  1011               	bcf	17,0	;volatile
   981                           
   982                           ;main.c: 154: if (SSP1STATbits.R_nW)
   983  0045  0024               	movlb	4	; select bank4
   984  0046  1D14               	btfss	20,2	;volatile
   985  0047  2862               	goto	i1l1042
   986                           
   987                           ;main.c: 155: {;main.c: 156: if (!SSP1STATbits.D_nA)
   988  0048  1A94               	btfsc	20,5	;volatile
   989  0049  2855               	goto	i1l1034
   990                           
   991                           ;main.c: 157: {;main.c: 158: SSP1BUF = I2C_buffer.byte[index_i2c++];
   992  004A  087A               	movf	_index_i2c,w
   993  004B  3E20               	addlw	(low (_I2C_buffer| 0))& (0+255)
   994  004C  0086               	movwf	6
   995  004D  0187               	clrf	7
   996  004E  0801               	movf	1,w
   997  004F  0091               	movwf	17	;volatile
   998  0050  3001               	movlw	1
   999  0051  00F2               	movwf	??_isr
  1000  0052  0872               	movf	??_isr,w
  1001  0053  07FA               	addwf	_index_i2c,f
  1002                           
  1003                           ;main.c: 159: SSP1CON1bits.CKP = 1;
  1004  0054  1615               	bsf	21,4	;volatile
  1005  0055                     i1l1034:	
  1006                           
  1007                           ;main.c: 160: };main.c: 161: if (SSP1STATbits.D_nA)
  1008  0055  1E94               	btfss	20,5	;volatile
  1009  0056  2862               	goto	i1l1042
  1010                           
  1011                           ;main.c: 162: {;main.c: 163: SSP1BUF = I2C_buffer.byte[index_i2c++];
  1012  0057  087A               	movf	_index_i2c,w
  1013  0058  3E20               	addlw	(low (_I2C_buffer| 0))& (0+255)
  1014  0059  0086               	movwf	6
  1015  005A  0187               	clrf	7
  1016  005B  0801               	movf	1,w
  1017  005C  0091               	movwf	17	;volatile
  1018  005D  3001               	movlw	1
  1019  005E  00F2               	movwf	??_isr
  1020  005F  0872               	movf	??_isr,w
  1021  0060  07FA               	addwf	_index_i2c,f
  1022                           
  1023                           ;main.c: 164: SSP1CON1bits.CKP = 1;
  1024  0061  1615               	bsf	21,4	;volatile
  1025  0062                     i1l1042:	
  1026                           
  1027                           ;main.c: 165: };main.c: 166: };main.c: 167: if (!SSP1STATbits.R_nW)
  1028  0062  1914               	btfsc	20,2	;volatile
  1029  0063  289B               	goto	i1l1076
  1030                           
  1031                           ;main.c: 168: {;main.c: 169: if (!SSP1STATbits.D_nA)
  1032  0064  1A94               	btfsc	20,5	;volatile
  1033  0065  286F               	goto	i1l1052
  1034                           
  1035                           ;main.c: 170: {;main.c: 171: first_i2c = 1;
  1036  0066  01F9               	clrf	_first_i2c
  1037  0067  0AF9               	incf	_first_i2c,f
  1038                           
  1039                           ;main.c: 172: junk = SSP1BUF;
  1040  0068  0811               	movf	17,w	;volatile
  1041  0069  00F2               	movwf	??_isr
  1042  006A  0872               	movf	??_isr,w
  1043  006B  0020               	movlb	0	; select bank0
  1044  006C  00A8               	movwf	isr@junk
  1045                           
  1046                           ;main.c: 173: SSP1CON1bits.CKP = 1;
  1047  006D  0024               	movlb	4	; select bank4
  1048  006E  1615               	bsf	21,4	;volatile
  1049  006F                     i1l1052:	
  1050                           
  1051                           ;main.c: 174: };main.c: 175: if (SSP1STATbits.D_nA)
  1052  006F  1E94               	btfss	20,5	;volatile
  1053  0070  289B               	goto	i1l1076
  1054                           
  1055                           ;main.c: 176: {;main.c: 177: if (first_i2c) {
  1056  0071  0879               	movf	_first_i2c,w
  1057  0072  1903               	btfsc	3,2
  1058  0073  287A               	goto	i1l1060
  1059                           
  1060                           ;main.c: 178: index_i2c = SSP1BUF;
  1061  0074  0811               	movf	17,w	;volatile
  1062  0075  00F2               	movwf	??_isr
  1063  0076  0872               	movf	??_isr,w
  1064  0077  00FA               	movwf	_index_i2c
  1065                           
  1066                           ;main.c: 179: first_i2c = 0;
  1067  0078  01F9               	clrf	_first_i2c
  1068                           
  1069                           ;main.c: 180: }
  1070  0079  2890               	goto	i1l1068
  1071  007A                     i1l1060:	
  1072                           
  1073                           ;main.c: 182: else {;main.c: 183: if (index_i2c < RX_ELMNTS)
  1074  007A  3006               	movlw	6
  1075  007B  027A               	subwf	_index_i2c,w
  1076  007C  1803               	skipnc
  1077  007D  288B               	goto	i1l1066
  1078                           
  1079                           ;main.c: 184: {;main.c: 185: I2C_buffer.byte[index_i2c++] = SSP1BUF;
  1080  007E  0811               	movf	17,w	;volatile
  1081  007F  00F2               	movwf	??_isr
  1082  0080  087A               	movf	_index_i2c,w
  1083  0081  3E20               	addlw	(low (_I2C_buffer| 0))& (0+255)
  1084  0082  0086               	movwf	6
  1085  0083  0187               	clrf	7
  1086  0084  0872               	movf	??_isr,w
  1087  0085  0081               	movwf	1
  1088  0086  3001               	movlw	1
  1089  0087  00F2               	movwf	??_isr
  1090  0088  0872               	movf	??_isr,w
  1091  0089  07FA               	addwf	_index_i2c,f
  1092                           
  1093                           ;main.c: 186: } else {
  1094  008A  2890               	goto	i1l1068
  1095  008B                     i1l1066:	
  1096                           
  1097                           ;main.c: 187: junk = SSP1BUF;
  1098  008B  0811               	movf	17,w	;volatile
  1099  008C  00F2               	movwf	??_isr
  1100  008D  0872               	movf	??_isr,w
  1101  008E  0020               	movlb	0	; select bank0
  1102  008F  00A8               	movwf	isr@junk
  1103  0090                     i1l1068:	
  1104                           
  1105                           ;main.c: 188: };main.c: 189: };main.c: 190: if (SSP1CON1bits.WCOL)
  1106  0090  0024               	movlb	4	; select bank4
  1107  0091  1F95               	btfss	21,7	;volatile
  1108  0092  2899               	goto	i1l1074
  1109                           
  1110                           ;main.c: 191: {;main.c: 192: SSP1CON1bits.WCOL = 0;
  1111  0093  1395               	bcf	21,7	;volatile
  1112                           
  1113                           ;main.c: 193: junk = SSP1BUF;
  1114  0094  0811               	movf	17,w	;volatile
  1115  0095  00F2               	movwf	??_isr
  1116  0096  0872               	movf	??_isr,w
  1117  0097  0020               	movlb	0	; select bank0
  1118  0098  00A8               	movwf	isr@junk
  1119  0099                     i1l1074:	
  1120                           
  1121                           ;main.c: 194: };main.c: 195: SSP1CON1bits.CKP = 1;
  1122  0099  0024               	movlb	4	; select bank4
  1123  009A  1615               	bsf	21,4	;volatile
  1124  009B                     i1l1076:	
  1125                           
  1126                           ;main.c: 196: };main.c: 197: };main.c: 198: PIR1bits.SSP1IF = 0;
  1127  009B  0020               	movlb	0	; select bank0
  1128  009C  1191               	bcf	17,3	;volatile
  1129                           
  1130                           ;main.c: 199: INTCONbits.IOCIE = 1;
  1131  009D  158B               	bsf	11,3	;volatile
  1132                           
  1133                           ;main.c: 200: PIE1bits.TMR1IE = 1;
  1134  009E  0021               	movlb	1	; select bank1
  1135  009F  1411               	bsf	17,0	;volatile
  1136  00A0                     i1l1082:	
  1137                           
  1138                           ;main.c: 201: };main.c: 203: if (PIR2bits.BCL1IF)
  1139  00A0  0020               	movlb	0	; select bank0
  1140  00A1  1D92               	btfss	18,3	;volatile
  1141  00A2  28AE               	goto	i1l117
  1142                           
  1143                           ;main.c: 204: {;main.c: 205: junk = SSP1BUF;
  1144  00A3  0024               	movlb	4	; select bank4
  1145  00A4  0811               	movf	17,w	;volatile
  1146  00A5  00F2               	movwf	??_isr
  1147  00A6  0872               	movf	??_isr,w
  1148  00A7  0020               	movlb	0	; select bank0
  1149  00A8  00A8               	movwf	isr@junk
  1150                           
  1151                           ;main.c: 206: PIR2bits.BCL1IF = 0;
  1152  00A9  1192               	bcf	18,3	;volatile
  1153                           
  1154                           ;main.c: 207: SSP1CON1bits.CKP = 1;
  1155  00AA  0024               	movlb	4	; select bank4
  1156  00AB  1615               	bsf	21,4	;volatile
  1157                           
  1158                           ;main.c: 208: PIR1bits.SSP1IF = 0;
  1159  00AC  0020               	movlb	0	; select bank0
  1160  00AD  1191               	bcf	17,3	;volatile
  1161  00AE                     i1l117:	
  1162  00AE  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  1163  00AF  0009               	retfie
  1164  00B0                     __end_of_isr:	
  1165                           
  1166                           	psect	text5
  1167  0142                     __ptext5:	
  1168 ;; *************** function _PWM_set_duty *****************
  1169 ;; Defined at:
  1170 ;;		line 97 in file "main.c"
  1171 ;; Parameters:    Size  Location     Type
  1172 ;;  duty            2    0[COMMON] unsigned int 
  1173 ;; Auto vars:     Size  Location     Type
  1174 ;;		None
  1175 ;; Return value:  Size  Location     Type
  1176 ;;                  1    wreg      void 
  1177 ;; Registers used:
  1178 ;;		wreg
  1179 ;; Tracked objects:
  1180 ;;		On entry : 1F/0
  1181 ;;		On exit  : 1A/0
  1182 ;;		Unchanged: 0/0
  1183 ;; Data sizes:     COMMON   BANK0   BANK1
  1184 ;;      Params:         2       0       0
  1185 ;;      Locals:         0       0       0
  1186 ;;      Temps:          0       0       0
  1187 ;;      Totals:         2       0       0
  1188 ;;Total ram usage:        2 bytes
  1189 ;; Hardware stack levels used:    1
  1190 ;; This function calls:
  1191 ;;		Nothing
  1192 ;; This function is called by:
  1193 ;;		_isr
  1194 ;; This function uses a non-reentrant model
  1195 ;;
  1196                           
  1197                           
  1198                           ;psect for function _PWM_set_duty
  1199  0142                     _PWM_set_duty:	
  1200                           
  1201                           ;main.c: 99: if (duty < 255) {
  1202                           
  1203                           ;incstack = 0
  1204                           ; Regs used in _PWM_set_duty: [wreg]
  1205  0142  3000               	movlw	0
  1206  0143  0271               	subwf	PWM_set_duty@duty+1,w
  1207  0144  30FF               	movlw	255
  1208  0145  1903               	skipnz
  1209  0146  0270               	subwf	PWM_set_duty@duty,w
  1210  0147  1803               	skipnc
  1211  0148  0008               	return
  1212                           
  1213                           ;main.c: 102: CCPR1L = (0xFF & ((unsigned int) duty));
  1214  0149  0870               	movf	PWM_set_duty@duty,w
  1215  014A  0025               	movlb	5	; select bank5
  1216  014B  0091               	movwf	17	;volatile
  1217  014C  0008               	return
  1218  014D                     __end_of_PWM_set_duty:	
  1219  007E                     btemp	set	126	;btemp
  1220  007E                     int$flags	set	126
  1221  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    1
    Data        2
    BSS         10
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80      4      13
    BANK1            32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_ADC_read

Critical Paths under _isr in COMMON

    _isr->_PWM_set_duty

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4      22
                                              7 COMMON     1     1      0
                                              0 BANK0      4     0      4
                           _ADC_read
                           _PWM_Init
                    _init_I2C_buffer
 ---------------------------------------------------------------------------------
 (1) _init_I2C_buffer                                      1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PWM_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_read                                             4     2      2      22
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                  1     1      0     120
                                              2 COMMON     1     1      0
                       _PWM_set_duty
 ---------------------------------------------------------------------------------
 (3) _PWM_set_duty                                         2     0      2     120
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_read
   _PWM_Init
   _init_I2C_buffer

 _isr (ROOT)
   _PWM_set_duty

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      18       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      4       D       6       16.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      18       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Jan 13 21:59:51 2020

             __CFG_CP$OFF 0000                        l86 0124                       l122 00F2  
                     u215 0112                       _PR2 001B                       u407 0108  
                     u417 011D              __CFG_CPD$OFF 0000                       _dir 0078  
                     _isr 0004              __CFG_BORV$LO 0000                       wreg 0009  
            __CFG_LVP$OFF 0000                      ?_isr 0070              __CFG_WDTE$ON 0000  
                    _WPUA 020C              __CFG_WRT$OFF 0000                      _main 00C2  
                    fsr1h 0007                      indf1 0001                      fsr1l 0006  
                    btemp 007E             __CFG_BOREN$ON 0000                      start 00B0  
        __end_of_ADC_read 012B             __CFG_IESO$OFF 0000             __CFG_MCLRE$ON 0000  
                   ??_isr 0072             __CFG_PLLEN$ON 0000     __size_of_PWM_set_duty 000B  
                   ?_main 0029                     _T1CON 0018                     _T2CON 001C  
                   i1l117 00AE                     u25_25 001A                     u26_25 0030  
                   _TRISA 008C             __CFG_PWRTE$ON 0000            __CFG_FCMEN$OFF 0000  
        __end_of_PWM_Init 0137                     status 0003                     wtemp0 007E  
            _PWM_set_duty 0142           __initialization 00B1              __end_of_main 010E  
                  ??_main 0077                    _ADCON0 009D                    _ADCON1 009E  
                  _ADRESH 009C                    _ADRESL 009B                    _CCPR1L 0291  
                  _ANSELA 018C                    i1l1010 0023                    i1l1022 0040  
                  i1l1016 0037                    i1l1034 0055                    i1l1042 0062  
                  i1l1060 007A                    i1l1052 006F                    i1l1074 0099  
                  i1l1066 008B                    i1l1082 00A0                    i1l1068 0090  
                  i1l1076 009B                    _INTCON 000B                    _OSCCON 0099  
          __CFG_STVREN$ON 0000                    _ledDim 0026  __size_of_init_I2C_buffer 000B  
            __pdataCOMMON 0078                 ?_ADC_read 0073         __end_of_RX_ELMNTS 0150  
 __end_of__initialization 00BF            __pcstackCOMMON 0070                 ?_PWM_Init 0070  
          _OPTION_REGbits 0095           ADC_read@channel 0076                ??_ADC_read 0075  
              __pbssBANK0 0020                __pmaintext 00C2                __pintentry 0004  
                 _CCP1CON 0293                ??_PWM_Init 0073                   _SSP1ADD 0212  
                 _SSP1BUF 0211         ??_init_I2C_buffer 0073          PWM_set_duty@duty 0070  
                 __ptext1 0137                   __ptext2 012B                   __ptext3 010E  
                 __ptext5 0142                 _T1CONbits 0018              __size_of_isr 00AC  
    end_of_initialization 00BF                   isr@junk 0028          __CFG_FOSC$INTOSC 0000  
       __size_of_ADC_read 001D                 _RX_ELMNTS 014F             __pidataCOMMON 014D  
       __size_of_PWM_Init 000C       start_initialization 00B1               __end_of_isr 00B0  
         _init_I2C_buffer 0137               __pbssCOMMON 007A                 ___latbits 0000  
           __pcstackBANK0 0029             ?_PWM_set_duty 0070                 _first_i2c 0079  
               _index_i2c 007A                  _ADC_read 010E                  _PIE1bits 0091  
                _PIE2bits 0092            ??_PWM_set_duty 0072                  _PIR1bits 0011  
                _PIR2bits 0012   __end_of_init_I2C_buffer 0142                  _SSP1CON1 0215  
                _SSP1STAT 0214                _ADCON0bits 009D                  _PWM_Init 012B  
              _I2C_buffer 0020                _APFCONbits 011D              _SSP1CON1bits 0215  
            _SSP1CON2bits 0216              _SSP1CON3bits 0217             __size_of_main 004C  
        ?_init_I2C_buffer 0070                  int$flags 007E                  main@argc 0029  
                main@argv 002B              _SSP1STATbits 0214                _INTCONbits 000B  
    __end_of_PWM_set_duty 014D                  intlevel1 0000         __CFG_CLKOUTEN$OFF 0000  
           __pstringtext1 014F  
